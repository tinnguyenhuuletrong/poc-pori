(()=>{"use strict";var __webpack_modules__={3554:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.RuntimeConfig=exports.schedulerNotifyMineAtkId=exports.schedulerNotifyMineNotifyIdType=exports.schedulerNotifyMineFinishId=exports.schedulerNewMineType=exports.schedulerNewMineId=exports.botMasterUid=exports.playerAddress=exports.activeEnv=exports.env=exports.VERSION=void 0;const tslib_1=__webpack_require__(752),pori_metadata_1=__webpack_require__(2819),fs_1=__webpack_require__(7147),path_1=__webpack_require__(1017),AppEnv=tslib_1.__importStar(__webpack_require__(4370)),AppEnvProd=tslib_1.__importStar(__webpack_require__(4370)),AppEnvProdPorichain=tslib_1.__importStar(__webpack_require__(6133));exports.VERSION="17",exports.env=pori_metadata_1.ENV.ProdPorichain,exports.activeEnv=function(env){let activeEnv;switch(env){case pori_metadata_1.ENV.Prod:activeEnv=AppEnvProd;break;case pori_metadata_1.ENV.ProdPorichain:activeEnv=AppEnvProdPorichain;break;case pori_metadata_1.ENV.Staging:activeEnv=AppEnv}return activeEnv}(exports.env),exports.playerAddress=process.env.PLAYER_ADDRESS,exports.botMasterUid=process.env.TELEGRAM_MASTER_ID;exports.schedulerNewMineId=()=>"schedule_new_mine",exports.schedulerNewMineType="submit_new_mine_action";exports.schedulerNotifyMineFinishId=mineId=>`schedule_mine_finish_${mineId}`,exports.schedulerNotifyMineNotifyIdType="schedule_mine_finish_notify_action";exports.schedulerNotifyMineAtkId=mineId=>`schedule_mine_atk_${mineId}`;const formationConfig=function(path){const config=(0,fs_1.readFileSync)(path).toString();return JSON.parse(config)}((0,path_1.join)(__dirname,"./assets/formation.json"));exports.RuntimeConfig={formations:formationConfig.formations,settings:formationConfig.settings}},2212:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.addWorkerTaskForMineAtkNotify=exports.addWorkerTaskForMineEndNotify=exports.registerWorkerNotify=void 0;const config_1=__webpack_require__(3554);exports.registerWorkerNotify=function({ctx,realm,scheduler,bot}){scheduler.addHandler(config_1.schedulerNotifyMineNotifyIdType,(async job=>{const{_id,params}=job,paramObj=JSON.parse(params),chatId=null==paramObj?void 0:paramObj.chatId,msgData=null==paramObj?void 0:paramObj.msgData,extra=(null==paramObj?void 0:paramObj.extra)||{};chatId&&msgData&&await bot.sendMessage(chatId,msgData,extra)}))},exports.addWorkerTaskForMineEndNotify=async function({ctx,realm,scheduler,chatId,mineId,endAt,pnMessage="ready for new action",extra={}}){const mineEndSchedulerId=(0,config_1.schedulerNotifyMineFinishId)(mineId),jobIns=await scheduler.getJobById(realm,mineEndSchedulerId);jobIns&&!jobIns.hasFinish&&jobIns.runAt.valueOf()===endAt.valueOf()||await scheduler.scheduleJob(realm,{codeName:config_1.schedulerNotifyMineNotifyIdType,runAt:endAt,params:JSON.stringify({chatId,msgData:pnMessage,extra}),_id:mineEndSchedulerId})},exports.addWorkerTaskForMineAtkNotify=async function({ctx,realm,scheduler,chatId,mineId,endAt,pnMessage="ready for new action",extra={}}){const mineAtkSchedulerId=(0,config_1.schedulerNotifyMineAtkId)(mineId),jobIns=await scheduler.getJobById(realm,mineAtkSchedulerId);jobIns&&!jobIns.hasFinish&&jobIns.runAt.valueOf()===endAt.valueOf()||await scheduler.scheduleJob(realm,{codeName:config_1.schedulerNotifyMineNotifyIdType,runAt:endAt,params:JSON.stringify({chatId,msgData:pnMessage,extra}),_id:mineAtkSchedulerId})}},6133:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.environment=void 0;const path_1=__webpack_require__(752).__importDefault(__webpack_require__(1017));exports.environment={dbPath:path_1.default.join(__dirname,"../../../../archived/repo/prodPoriChain/allEvents.prod.realm"),walletConnectSessionStoragePath:path_1.default.join(__dirname,"../../../../archived/repo/.web3session"),botMemoryPath:path_1.default.join(__dirname,"../../../../archived/repo/.botMem"),mongodbDataStoreUri:process.env.MONGODB_DATA_STORE_URI,mongodbDataStoreSSLCer:path_1.default.join(__dirname,"../../../../archived/repo/mongodb.pem"),aesKeyPath:path_1.default.join(__dirname,"../../../../archived/repo/.aesKey"),createdBlock:7643,production:!0}},4370:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.environment=void 0;const path_1=__webpack_require__(752).__importDefault(__webpack_require__(1017));exports.environment={dbPath:path_1.default.join(__dirname,"../../../../archived/repo/prod/allEvents.prod.realm"),walletConnectSessionStoragePath:path_1.default.join(__dirname,"../../../../archived/repo/.web3session"),botMemoryPath:path_1.default.join(__dirname,"../../../../archived/repo/.botMem"),mongodbDataStoreUri:process.env.MONGODB_DATA_STORE_URI,mongodbDataStoreSSLCer:path_1.default.join(__dirname,"../../../../archived/repo/mongodb.pem"),aesKeyPath:path_1.default.join(__dirname,"../../../../archived/repo/.aesKey"),createdBlock:27503296,production:!0}},1529:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});__webpack_require__(752).__exportStar(__webpack_require__(9653),exports)},9653:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.fetchBolb=exports.downloadBlob=exports.storeBlob=exports.addMongodbDataStore=exports.waitForConnected=void 0;const tslib_1=__webpack_require__(752),mongodb_1=__webpack_require__(8013),debug_1=tslib_1.__importDefault(__webpack_require__(6974)),utils_1=__webpack_require__(9095),log=(0,debug_1.default)("pori:mongodb-data-store"),connectDefer=new utils_1.Deferred;function getBucket(mongoClient){const db=mongoClient.db("storage");return new mongodb_1.GridFSBucket(db,{chunkSizeBytes:10485760})}exports.waitForConnected=async function(ctx){return await connectDefer.promise,ctx.mongoClient},exports.addMongodbDataStore=async function(ctx,uri,pathToCert){const client=new mongodb_1.MongoClient(uri,{sslKey:pathToCert,sslCert:pathToCert,serverApi:mongodb_1.ServerApiVersion.v1});return connectDefer.reset(),await client.connect(),ctx.mongoClient=client,connectDefer.resolve(client),log("connected!"),client},exports.storeBlob=async function(ctx,key,dataStream,metadata={}){if(!ctx.mongoClient)throw new Error("ctx.mongoClient not found");const bucket=getBucket(ctx.mongoClient),oldFiles=await bucket.find({filename:key}).toArray();for(const it of oldFiles)await bucket.delete(it._id);const writeStream=bucket.openUploadStream(key,{metadata});return dataStream.pipe(writeStream),new Promise(((resolve,_)=>{writeStream.once("finish",(()=>{resolve()}))}))},exports.downloadBlob=async function(ctx,key){if(!ctx.mongoClient)throw new Error("ctx.mongoClient not found");const bucket=getBucket(ctx.mongoClient);return[(await bucket.find({filename:key},{sort:{uploadDate:-1}}).toArray())[0],bucket.openDownloadStreamByName(key)]},exports.fetchBolb=async function(ctx,key){if(!ctx.mongoClient)throw new Error("ctx.mongoClient not found");const bucket=getBucket(ctx.mongoClient);return(await bucket.find({filename:key},{sort:{uploadDate:-1}}).toArray())[0]}},2664:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Auto=exports.Cmds=exports.Computed=exports.WalletActions=exports.Workflow=exports.Adventure=exports.DataView=exports.Input=void 0;const tslib_1=__webpack_require__(752),Input=tslib_1.__importStar(__webpack_require__(747));exports.Input=Input;const DataView=tslib_1.__importStar(__webpack_require__(7343));exports.DataView=DataView;const Adventure=tslib_1.__importStar(__webpack_require__(6611));exports.Adventure=Adventure;const Workflow=tslib_1.__importStar(__webpack_require__(4854));exports.Workflow=Workflow;const WalletActions=tslib_1.__importStar(__webpack_require__(4223));exports.WalletActions=WalletActions;const MyAdventure=tslib_1.__importStar(__webpack_require__(9123)),Auto=tslib_1.__importStar(__webpack_require__(3102));exports.Auto=Auto;const Cmds=tslib_1.__importStar(__webpack_require__(8657));exports.Cmds=Cmds,tslib_1.__exportStar(__webpack_require__(1807),exports),tslib_1.__exportStar(__webpack_require__(9390),exports),tslib_1.__exportStar(__webpack_require__(1491),exports),tslib_1.__exportStar(__webpack_require__(3500),exports),tslib_1.__exportStar(__webpack_require__(3794),exports),tslib_1.__exportStar(__webpack_require__(3684),exports),tslib_1.__exportStar(__webpack_require__(5042),exports),tslib_1.__exportStar(__webpack_require__(7051),exports),tslib_1.__exportStar(__webpack_require__(111),exports),tslib_1.__exportStar(__webpack_require__(9278),exports);const Computed={MyAdventure};exports.Computed=Computed},6611:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.queryPowers=exports.getPoriansAtSCellSc=exports.queryPortalInfoSc=exports.queryMissiontOfPoriSc=exports.queryRandomRewardLevelFromSc=exports.queryMineinfoFromSc=exports.randAdventureSlot=void 0;const pori_metadata_1=__webpack_require__(2819),pori_repositories_1=__webpack_require__(2098),utils_1=__webpack_require__(9095),lodash_1=__webpack_require__(6517),ALL_SLOTS=[1,2,3,4,5,6,7,8,9];function parseMinePlayer(ctx,playerInfo){return{address:playerInfo.player,selectedIndex:ctx.web3.utils.hexToBytes(playerInfo.selectedCells).filter((itm=>itm>0))}}exports.randAdventureSlot=function(samples,excludeIndex=[]){let pool=ALL_SLOTS.filter((itm=>!excludeIndex.includes(itm)));const res=[];for(let i=0;i<samples;i++){const next=pool[(0,lodash_1.random)(0,pool.length-1,!1)];if(!next)throw new Error("not enough pool");pool=pool.filter((v=>v!==next)),res.push(next)}return res},exports.queryMineinfoFromSc=async function(ctx,mineId){const res=await ctx.contract.methods.mines(mineId-1).call(),farmer=parseMinePlayer(ctx,res.farmer),helper=parseMinePlayer(ctx,res.helper),rewardMap=function(ctx,rawRewardMap){const bytes=ctx.web3.utils.hexToBytes(rawRewardMap),env=(0,utils_1.byte2number)(bytes.slice(0,2)),startTimeUnixSec=(0,utils_1.byte2number)(bytes.slice(20,28)),slots={},startOffset=2;for(let i=0;i<9;i++){const reward=bytes[startOffset+2*i],joined=bytes[startOffset+2*i+1];slots[i]={reward,joined}}return{env,startTimeUnixSec,startTimeInDate:new Date(1e3*startTimeUnixSec),slots,mineRawRewadMap:rawRewardMap}}(ctx,res.rewardMap);return{farmer,helper,rewardMap}},exports.queryRandomRewardLevelFromSc=async function(ctx,mineInfo){return ctx.contract.methods.randomRewardLevel(mineInfo.rewardMap.mineRawRewadMap).call()},exports.queryMissiontOfPoriSc=async function(ctx,pori){const engagedMission=await ctx.contract.methods.missionOfPori(pori).call();return parseInt(engagedMission)},exports.queryPortalInfoSc=async function(ctx,addr){const info=await ctx.contractPortal.methods.portalInfoOf(addr).call(),{missions,fastMissions,capacityMissions,suppliedRiken,availableRiken,lockedRiken}=info;let nextMissionRequireRiken=parseInt(await ctx.contractPortal.methods.mission2Riken(+fastMissions+1).call())/pori_metadata_1.TEN_POWER_10;return nextMissionRequireRiken<=0&&(nextMissionRequireRiken=Number.MAX_SAFE_INTEGER),{missions:parseInt(missions),fastMissions:parseInt(fastMissions),capacityMissions:parseInt(capacityMissions),suppliedRiken:parseInt(suppliedRiken)/pori_metadata_1.TEN_POWER_10,availableRiken:parseInt(availableRiken)/pori_metadata_1.TEN_POWER_10,lockedRiken:parseInt(lockedRiken)/pori_metadata_1.TEN_POWER_10,nextMissionRequireRiken}},exports.getPoriansAtSCellSc=async function(ctx,missionId){const[farmerSCellInfo,helperSCellInfo]=await Promise.all([ctx.contract.methods.getPoriansAtSCell(missionId,!1).call(),ctx.contract.methods.getPoriansAtSCell(missionId,!0).call()]);return{farmer:[farmerSCellInfo[0],farmerSCellInfo[1]].filter((itm=>"0"!==itm)).map((itm=>itm.toString())),helper:[helperSCellInfo[0],helperSCellInfo[1]].filter((itm=>"0"!==itm)).map((itm=>itm.toString()))}},exports.queryPowers=function({ctx,realm,farmerPories,supporterPories}){const powers={};for(const id of farmerPories){const info=pori_repositories_1.PoriRepo.findOneSync(realm,id);info&&(powers[id]=info.minePower)}for(const id of supporterPories){const info=pori_repositories_1.PoriRepo.findOneSync(realm,id);info&&(powers[id]=info.helpPower)}return powers}},3102:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.stopBot=exports.autoPlayV1=exports.autoRefreshStatus=exports.AutoPlayDb=exports.ESB_P_THRESHOLD_KEEP_BIG_REWARD=void 0;const tslib_1=__webpack_require__(752),index_1=__webpack_require__(2664),utils_1=__webpack_require__(9095),moment_1=tslib_1.__importDefault(__webpack_require__(2245)),adventure_1=__webpack_require__(6611),supportSlotPick_1=__webpack_require__(3586);exports.ESB_P_THRESHOLD_KEEP_BIG_REWARD=15;function captureStartedBot(state,args){const id=state.id;state.finishDefered.promise.then((res=>{console.log("bot finish")})).catch((err=>{console.log("bot error",err)})).finally((()=>{delete exports.AutoPlayDb[id]})),exports.AutoPlayDb[id]={state,args}}async function refreshStatus(state,realm,ctx,playerAddress){return await takeABreak(state,ctx),await index_1.Computed.MyAdventure.refreshAdventureStatsForAddress({realm,ctx},playerAddress)}async function takeABreak(state,ctx,sec){await state.promiseWithAbort((0,utils_1.waitForMs)(null!=sec?sec:ctx.setting.autoPlayMicroDelayMs))}async function checkGasPrice({ctx,end,state}){const msgInfo=await ctx.ui.writeMessage("checking gas...");for(;Date.now()<end;){const web3GasPrice=await index_1.WalletActions.currentGasPrice({ctx}),valueInGweith=ctx.web3.utils.toWei(ctx.setting.safeGweith.toString(),"gwei");if(!(+web3GasPrice>+valueInGweith)){ctx.ui.editMessage(msgInfo,`gas price ${web3GasPrice} is safe to go`);break}ctx.ui.editMessage(msgInfo,`gas price higher than expected ${web3GasPrice} > ${valueInGweith}. Check again after 60000ms`),await state.promiseWithAbort((0,utils_1.waitForMs)(6e4))}}async function checkPoriMissionCapping({ctx,args,state}){const pories=[...args.minePories];args.supportPori&&pories.push(args.supportPori);const msgInfo=await ctx.ui.writeMessage("checking pories capping...");let maxMission=-1;for(const it of pories){const missionCount=await(0,adventure_1.queryMissiontOfPoriSc)(ctx,it);if(missionCount>maxMission&&(maxMission=missionCount),missionCount>500)throw new Error(`Pori mission capping reach ${it}: ${missionCount}`)}ctx.ui.editMessage(msgInfo,`capping is safe to go. Current cap ${maxMission}/500`)}async function checkPortal({ctx,args,playerAddress,end,state}){if(!args.usePortal)return;const msgInfo=await ctx.ui.writeMessage("checking portal capping...");for(;Date.now()<end;){const portalCap=await index_1.Adventure.queryPortalInfoSc(ctx,playerAddress);if(!(portalCap.availableRiken<portalCap.nextMissionRequireRiken))break;ctx.ui.editMessage(msgInfo,`portal capping is not enough. ${portalCap.availableRiken} left. Require ${portalCap.nextMissionRequireRiken} ... try again after 60s`),await state.promiseWithAbort((0,utils_1.waitForMs)(6e4))}ctx.ui.editMessage(msgInfo,"portal capping is safe to go")}async function doSupport(ctx,mineId,SUPPORT_PORI,realm){await index_1.Cmds.cmdDoSupport({ctx,realm,args:`${mineId}`,SUPPORT_PORI,customSlotPick:supportSlotPick_1.supportSlotPick})}async function doFinishWithRetry(ctx,realm,mineId,state){await(0,utils_1.waitForMs)(3e4);await(0,utils_1.doTaskWithRetry)(4,(async()=>{await index_1.Cmds.cmdDoFinish({ctx,realm,args:`${mineId}`})}),((err,retryNo)=>{ctx.ui.writeMessage(`autoPlay #bot${state.id} retry no ${retryNo} cmdDoFinish after error ${err.message}`)}),6e4)}function findActiveMine({ctx,addvStats,args}){const minePories=[...args.minePories].map((itm=>itm.toString())).sort();for(const key in addvStats.mines){const mineInfo=addvStats.mines[key],farmerPories=(mineInfo.farmerPories||[]).map((itm=>itm.toString())).sort();if((0,utils_1.isArrayIncludeAll)(farmerPories,minePories))return mineInfo}return null}exports.AutoPlayDb={},exports.autoRefreshStatus=async function({ctx,realm,playerAddress,args}){const intervalMs=args.intervalMs,botId="auto_refresh";if(exports.AutoPlayDb[botId])return void ctx.ui.writeMessage(`bot with id ${botId} is running. skip it`);const state=index_1.Workflow.createWorkflow((async state=>{let count=0;for(state.updateState((()=>{state.data._it=count,state.data._nextAt=new Date(Date.now()+intervalMs)}));;)await takeABreak(state,ctx,intervalMs),await state.promiseWithAbort(refreshStatus(state,realm,ctx,playerAddress)),state.updateState((()=>{count++,state.data._it=count,state.data._nextAt=new Date(Date.now()+intervalMs)}))}),botId);return state.start().catch((err=>{ctx.ui.writeMessage(`autoRefresh #bot${state.id} error ${err.toString()}`)})).finally((()=>{ctx.ui.writeMessage(`autoRefresh #bot${state.id} end!`)})),ctx.ui.writeMessage(`autoRefresh #bot${state.id} started:\n  - Interval: ${intervalMs/6e4} mins\n  `),captureStartedBot(state,args),state},exports.autoPlayV1=async function({ctx,realm,playerAddress,args}){const{minePories,supportPori,timeOutHours}=args,start=Date.now(),end=start+60*timeOutHours*60*1e3,botId=`bot_${[...args.minePories,args.supportPori].join("_")}`;if(exports.AutoPlayDb[botId])return void ctx.ui.writeMessage(`bot with id ${botId} is running. skip it`);const state=index_1.Workflow.createWorkflow((async state=>{for(;Date.now()<end;){let addvStats=await refreshStatus(state,realm,ctx,playerAddress),activeMine=findActiveMine({ctx,addvStats,args});if(activeMine||(state.updateState((()=>{state.data.step="start_mine"})),await state.promiseWithAbort(checkGasPrice({ctx,end,state})),await state.promiseWithAbort(checkPoriMissionCapping({ctx,args,state})),await state.promiseWithAbort(checkPortal({ctx,args,state,end,playerAddress})),await state.promiseWithAbort(index_1.Cmds.cmdDoMine({ctx,realm,args:args.usePortal?"1":"0",minePories})),state.updateState((()=>{state.data.step="start_mine_finish"}))),addvStats=await refreshStatus(state,realm,ctx,playerAddress),activeMine=findActiveMine({ctx,addvStats,args}),!activeMine)throw console.log(addvStats),"OoO";const mineId=activeMine.mineId,nextSupportAt=activeMine.atkAt;(0,moment_1.default)(nextSupportAt||0).isAfter()&&(state.updateState((()=>{state.data.step=`waiting_for_support. Wakeup at ${nextSupportAt.toLocaleString()} - ${(0,moment_1.default)(nextSupportAt).fromNow()}`})),await state.promiseWithAbort((0,utils_1.waitForMs)(nextSupportAt.valueOf()-Date.now()+ctx.setting.autoPlayMicroDelayMs)),supportPori&&(state.updateState((()=>{state.data.step="begin_support"})),await state.promiseWithAbort(doSupport(ctx,mineId,supportPori,realm)),state.updateState((()=>{state.data.step="end_support"}))));const sAt=activeMine.blockedTo.valueOf()-18e5,needToWaitForSMin=sAt-Date.now()+ctx.setting.autoPlayMicroDelayMs;needToWaitForSMin>0&&(state.updateState((()=>{state.data.step=`waiting_for_s. Wakeup at ${new Date(sAt).toLocaleString()} - ${(0,moment_1.default)(new Date(sAt)).fromNow()}`})),await state.promiseWithAbort((0,utils_1.waitForMs)(needToWaitForSMin)),await state.promiseWithAbort(checkGasPrice({ctx,end,state})),state.updateState((()=>{state.data.step="begin_s"})),await state.promiseWithAbort(index_1.Cmds.cmdDoSBattle({ctx,realm,args:mineId.toString()})),state.updateState((()=>{state.data.step="end_s"}))),addvStats=await refreshStatus(state,realm,ctx,playerAddress),activeMine=findActiveMine({ctx,addvStats,args}),activeMine&&(state.updateState((()=>{state.data.step=`waiting_for_finish. Wakeup at ${null==activeMine?void 0:activeMine.blockedTo.toLocaleString()} - ${(0,moment_1.default)(null==activeMine?void 0:activeMine.blockedTo).fromNow()}`})),await state.promiseWithAbort((0,utils_1.waitForMs)(activeMine.blockedTo.valueOf()-Date.now()+ctx.setting.autoPlayMicroDelayMs)),await state.promiseWithAbort(checkGasPrice({ctx,end,state})),state.updateState((()=>{state.data.step="begin_finish"})),await state.promiseWithAbort(doFinishWithRetry(ctx,realm,mineId,state)),state.updateState((()=>{state.data.step="end_finish"}))),await takeABreak(state,ctx)}}),botId);return state.onChange=()=>{ctx.ui.writeMessage(`autoPlay #bot${state.id} step ${state.data.step}`)},state.start().catch((err=>{ctx.ui.writeMessage(`autoPlay #bot${state.id} error ${err.toString()}`)})).finally((()=>{ctx.ui.writeMessage(`autoPlay #bot${state.id} end!`)})),ctx.ui.writeMessage(`autoPlay #bot${state.id} started:\n  - BeginAt: ${new Date(start).toLocaleString()}\n  - BeginEnd: ${new Date(end).toLocaleString()}\n  - Duration: ${timeOutHours} hours\n  `),captureStartedBot(state,args),state},exports.stopBot=function(id){const botInfo=exports.AutoPlayDb[id];botInfo&&(botInfo.state.abort(),delete exports.AutoPlayDb[id])}},4338:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.sbattleSlotPick=void 0;const lodash_1=__webpack_require__(6517),autoPlayWorkflow_1=__webpack_require__(3102);function _parseMineInfo(mineInfo){const farmerPories=mineInfo.farmerPories||[],farmerRewardLevel=mineInfo.farmerRewardLevel||[],farmerSlots=mineInfo.farmerSlots||[],supporterPories=mineInfo.supporterPories||[],supporterRewardLevel=mineInfo.supporterRewardLevel||[],supporterSlots=mineInfo.supporterSlots||[],mineId=mineInfo.mineId,sIndex=[...(null==mineInfo?void 0:mineInfo.farmerSlots)||[],...(null==mineInfo?void 0:mineInfo.supporterSlots)||[]][[...farmerRewardLevel,...supporterRewardLevel].indexOf(4)],powerOf=id=>mineInfo.powers[id.toString()],farmerPoriesSortedByDecPower=(0,lodash_1.sortBy)(farmerPories.map(((itm,index)=>({id:itm,index,power:powerOf(itm),rewardLevel:farmerRewardLevel[index]}))),(a=>a.power)).reverse(),supporterPoriesSortedByDecPower=(0,lodash_1.sortBy)(supporterPories.map(((itm,index)=>({id:itm,index,power:powerOf(itm),rewardLevel:supporterRewardLevel[index]}))),(a=>a.power)).reverse(),farmerMaxPowerOf2=farmerPoriesSortedByDecPower[0].power+farmerPoriesSortedByDecPower[1].power,supporterMaxPowerOf2=supporterPoriesSortedByDecPower[0].power+supporterPoriesSortedByDecPower[1].power;return{mineId,sIndex,hasS:!!sIndex,farmerPories,farmerRewardLevel,farmerSlots,supporterPories,supporterRewardLevel,supporterSlots,farmerPoriesSortedByDecPower,supporterPoriesSortedByDecPower,farmerMaxPowerOf2,supporterMaxPowerOf2,powerOf}}exports.sbattleSlotPick=async function({mineInfo,sCellInfo,isFarmer,ctx}){if(!mineInfo.supporterAddress)return await ctx.ui.writeMessage(`sbattle ${mineInfo.mineId}: empty supporter`),null;const parseMineInfo=_parseMineInfo(mineInfo),{supporterPories,hasS,mineId,sIndex,farmerMaxPowerOf2,supporterMaxPowerOf2,farmerPories,supporterPoriesSortedByDecPower,farmerPoriesSortedByDecPower,powerOf}=parseMineInfo;if(!hasS)return await ctx.ui.writeMessage(`sbattle ${mineId}: s not found`),null;if(supporterPories.length<=3)return await ctx.ui.writeMessage(`sbattle ${mineId}: assit have 3 pories case`),async function({mineInfo,sCellInfo,isFarmer,ctx}){const parseMineInfo=_parseMineInfo(mineInfo),{mineId,sIndex,powerOf,farmerMaxPowerOf2,farmerPoriesSortedByDecPower}=parseMineInfo,sPowerFarmer=(0,lodash_1.sum)(sCellInfo.farmer.map((itm=>powerOf(itm)))),sPowerSupporter=(0,lodash_1.sum)(sCellInfo.helper.map((itm=>powerOf(itm))));if(sPowerFarmer>sPowerSupporter)return await ctx.ui.writeMessage(`sbattle ${mineId}: explorer power higher ${sPowerFarmer} vs ${sPowerSupporter} and assit can not play s. nothing to do`),null;const minAtk=powerOf(sCellInfo.helper[0]),poriInfo=function(mineInfo,minAtk){const{farmerPoriesSortedByDecPower}=mineInfo,tmp=farmerPoriesSortedByDecPower.filter((itm=>itm.power>minAtk)),res=(0,lodash_1.minBy)(tmp,(itm=>itm.rewardLevel));return res||null}(parseMineInfo,minAtk);if(poriInfo)return await ctx.ui.writeMessage(`sbattle ${mineId}: move min rewardLevel -> S. ${poriInfo.id} - R:${poriInfo.rewardLevel} - Pw:${poriInfo.power}`),{missionId:mineId,srcIds:[poriInfo.id],desIds:[0],sTreasureIndex:sIndex};if(minAtk>farmerMaxPowerOf2)return await ctx.ui.writeMessage(`sbattle ${mineId}: don't have 2 pories atk > ${minAtk}. nothing to do`),null;const max1=farmerPoriesSortedByDecPower[0],max2=farmerPoriesSortedByDecPower[1],maxSum=max1.power+max2.power,minCost=max1.rewardLevel+max2.rewardLevel;await ctx.ui.writeMessage(`sbattle ${mineId}: max2Power power ${maxSum} cost ${minCost} pair ${max1.id} - ${max1.power} - ${max1.rewardLevel}, ${max2.id} - ${max2.power} - ${max2.rewardLevel}`);const sFarmer=sCellInfo.farmer.map((itm=>+itm)),srcIds=[max1,max2].filter((itm=>!sFarmer.includes(itm.id))).map((itm=>itm.id)),desIds=sFarmer.filter((itm=>![max1.id,max2.id].includes(itm)));if(desIds.length!=srcIds.length){const needToFill=srcIds.length-desIds.length;for(let i=0;i<needToFill;i++)desIds.push(0)}return await ctx.ui.writeMessage(`sbattle ${mineId}: move srcIds: ${srcIds.join(",")} -> desIds: ${desIds.join(",")} `),{missionId:mineId,srcIds,desIds,sTreasureIndex:sIndex}}({mineInfo,sCellInfo,isFarmer,ctx});if(supporterMaxPowerOf2>farmerMaxPowerOf2){const esbCal=await ctx.contract.methods.getESB(farmerMaxPowerOf2,supporterMaxPowerOf2).call(),esbPercentage=Math.round(+esbCal/100);if(esbPercentage<autoPlayWorkflow_1.ESB_P_THRESHOLD_KEEP_BIG_REWARD)return await ctx.ui.writeMessage(`sbattle ${mineId}: max2Power lesser than supporter ${farmerMaxPowerOf2} < ${supporterMaxPowerOf2}. And ebs too low ${esbPercentage}`),null;await ctx.ui.writeMessage(`sbattle ${mineId}: ebs ${esbPercentage}`)}await ctx.ui.writeMessage(`sbattle ${mineId}: max2Power of supporter ${supporterMaxPowerOf2}, farmer ${farmerMaxPowerOf2}. sFarmer: ${sCellInfo.farmer.join(",")}, sSupport: ${sCellInfo.helper.join(",")}`);const max1=farmerPoriesSortedByDecPower[0],max2=farmerPoriesSortedByDecPower[1],maxSum=max1.power+max2.power,minCost=max1.rewardLevel+max2.rewardLevel;await ctx.ui.writeMessage(`sbattle ${mineId}: max2Power power ${maxSum} cost ${minCost} pair ${max1.id} - ${max1.power} - ${max1.rewardLevel}, ${max2.id} - ${max2.power} - ${max2.rewardLevel}`);const sFarmer=sCellInfo.farmer.map((itm=>+itm)),srcIds=[max1,max2].filter((itm=>!sFarmer.includes(itm.id))).map((itm=>itm.id)),desIds=sFarmer.filter((itm=>![max1.id,max2.id].includes(itm)));if(desIds.length!=srcIds.length){const needToFill=srcIds.length-desIds.length;for(let i=0;i<needToFill;i++)desIds.push(0)}return await ctx.ui.writeMessage(`sbattle ${mineId}: move srcIds: ${srcIds.join(",")} -> desIds: ${desIds.join(",")} `),{missionId:mineId,srcIds,desIds,sTreasureIndex:sIndex}}},3586:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.supportSlotPick=void 0;const index_1=__webpack_require__(2664),lodash_1=__webpack_require__(6517),autoPlayWorkflow_1=__webpack_require__(3102);exports.supportSlotPick=async function({mineInfo,isFarmer,pori,ctx}){var _a,_b;const supporterRewardLevel=(null==mineInfo?void 0:mineInfo.supporterRewardLevel)||[],farmerRewardLevel=(null==mineInfo?void 0:mineInfo.farmerRewardLevel)||[],hasSupporter=!!mineInfo.supporterAddress,activeIndexs=[...(null==mineInfo?void 0:mineInfo.farmerSlots)||[],...(null==mineInfo?void 0:mineInfo.supporterSlots)||[]],activeRewardLevels=[...farmerRewardLevel,...supporterRewardLevel];let slotIndex;const bigRewardIndex=activeIndexs[activeRewardLevels.indexOf(4)],isFarmerFound=farmerRewardLevel.includes(4);let esbPercentage=NaN,bigRewardEP=-1,bigRewardAP=-1;if(hasSupporter)if(hasSupporter&&mineInfo.hasBigReward)if(isFarmerFound){const farmerPories=(null==mineInfo?void 0:mineInfo.farmerPories)||[],supporterPories=(null==mineInfo?void 0:mineInfo.supporterPories)||[],farmerPori=farmerPories[farmerRewardLevel.indexOf(4)];bigRewardEP=null!==(_a=null==mineInfo?void 0:mineInfo.powers[farmerPori])&&void 0!==_a?_a:0;const supporterPori=supporterPories[supporterRewardLevel.indexOf(4)];bigRewardAP=null!==(_b=null==mineInfo?void 0:mineInfo.powers[supporterPori])&&void 0!==_b?_b:0;const esbCal=await ctx.contract.methods.getESB(bigRewardEP,bigRewardAP).call();esbPercentage=Math.round(+esbCal/100),slotIndex=esbPercentage>=autoPlayWorkflow_1.ESB_P_THRESHOLD_KEEP_BIG_REWARD?bigRewardIndex:index_1.Adventure.randAdventureSlot(1,(0,lodash_1.uniq)(activeIndexs))[0]}else slotIndex=index_1.Adventure.randAdventureSlot(1,(0,lodash_1.uniq)(activeIndexs))[0];else slotIndex=index_1.Adventure.randAdventureSlot(1,(0,lodash_1.uniq)(activeIndexs))[0];else slotIndex=index_1.Adventure.randAdventureSlot(1,(0,lodash_1.uniq)(activeIndexs))[0];return console.log({isFarmer,activeIndexs,activeRewardLevels,bigRewardIndex,pori,slotIndex,isFarmerFound}),await ctx.ui.writeMessage(`roger that!. send pori ${pori} to support mineId:${mineInfo.mineId} at ${slotIndex} \n\n    - (bigRewardIndex: ${bigRewardIndex}, isFarmerFound:${isFarmerFound}) \n    - (bigRewardEP1: ${bigRewardEP}, bigRewardAP1: ${bigRewardAP}, esbPercentage: ${esbPercentage})`),slotIndex}},1807:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.scanEvents=exports.listenEvents=exports.getMineInfo=void 0,exports.getMineInfo=async function({contract},mineId){const mineInfo=await contract.methods.mines(mineId).call(),{state,farmer,helper,rewardMap}=mineInfo;return{state,farmer,helper,rewardMap}},exports.listenEvents=async function({contract}){return contract.events.allEvents().on("connected",(function(subscriptionId){console.log(subscriptionId)}))},exports.scanEvents=async function(ctx,{filter="allEvents",fromBlock,toBlock}){return ctx.contract.getPastEvents(filter,{fromBlock,toBlock})}},8657:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.cmdDoSBattle=exports.cmdDoSupport=exports.cmdDoAtk=exports.cmdDoFinish=exports.cmdDoMine=void 0;const index_1=__webpack_require__(2664),pori_metadata_1=__webpack_require__(2819),utils_1=__webpack_require__(9095),lodash_1=__webpack_require__(6517),myAdventure_1=__webpack_require__(9123),sbattleSlotPick_1=__webpack_require__(4338),adventure_1=__webpack_require__(6611);async function defaultSupportSlotPick({mineInfo,isFarmer,pori,ctx}){const activeIndexs=[...(null==mineInfo?void 0:mineInfo.farmerSlots)||[],...(null==mineInfo?void 0:mineInfo.supporterSlots)||[]],activeRewardLevels=[...(null==mineInfo?void 0:mineInfo.farmerRewardLevel)||[],...(null==mineInfo?void 0:mineInfo.supporterRewardLevel)||[]],bigRewardIndex=activeIndexs[activeRewardLevels.indexOf(4)],slotIndex=bigRewardIndex||index_1.Adventure.randAdventureSlot(1,(0,lodash_1.uniq)(activeIndexs))[0];return console.log({isFarmer,activeIndexs,activeRewardLevels,bigRewardIndex,pori,slotIndex}),await ctx.ui.writeMessage(`roger that!. send pori ${pori} to support mineId:${mineInfo.mineId} at ${slotIndex} (bigRewardIndex: ${bigRewardIndex})`),slotIndex}exports.cmdDoMine=async function({ctx,realm,args,minePories}){if(!ctx.walletAcc)return void console.warn("wallet channel not ready. Please run wallet_unlock first");const tmp=args.split(" "),usePortal=(0,utils_1.boolFromString)(tmp[0]),poriants=minePories,index=index_1.Adventure.randAdventureSlot(3);await ctx.ui.writeMessage(`roger that!. Start new mine. usePortal:${usePortal}`);const callData=ctx.contract.methods.startAdventure(poriants,index,!usePortal).encodeABI();console.log({poriants,index,usePortal});const tx={from:ctx.walletAcc.address,to:(0,pori_metadata_1.getIdleGameAddressSC)(ctx.env).address,data:callData};ctx.walletAcc||await ctx.ui.writeMessage("Sir! please accept tx in trust wallet");const txHash=await index_1.WalletActions.sendRequestForWalletConnectTx({ctx},tx,(r=>{ctx.ui.writeMessage(`on Receipt: ${r.transactionHash}`)}));txHash?await ctx.ui.writeMessage((0,pori_metadata_1.getChainExplorerTxHashLink)(ctx.env,txHash)):await ctx.ui.writeMessage("Ố ồ..")},exports.cmdDoFinish=async function({ctx,realm,args}){if(!ctx.walletAcc)return void console.warn("wallet channel not ready. Please run wallet_unlock first");const tmp=args.split(" "),mineId=parseInt(tmp[0]);if(Number.isNaN(mineId))return await ctx.ui.writeMessage("Usage: /finish <mineId>");const playerAddress=ctx.playerAddress||"";if(!(await(0,myAdventure_1.refreshAdventureStatsForAddress)({realm,ctx},playerAddress)).mines[mineId])return console.log("opps. Mine status changed"),void await ctx.ui.writeMessage("opps. Mine status changed. Already finished....");await ctx.ui.writeMessage(`roger that!. Finish mine: ${mineId}`);const callData=ctx.contract.methods.finish(mineId).encodeABI();console.log({mineId});const tx={from:ctx.walletAcc.address,to:(0,pori_metadata_1.getIdleGameAddressSC)(ctx.env).address,data:callData};ctx.walletAcc||await ctx.ui.writeMessage("Sir! please accept tx in trust wallet");const txHash=await index_1.WalletActions.sendRequestForWalletConnectTx({ctx},tx,(r=>{ctx.ui.writeMessage(`on Receipt: ${r.transactionHash}`)}));txHash?await ctx.ui.writeMessage((0,pori_metadata_1.getChainExplorerTxHashLink)(ctx.env,txHash)):await ctx.ui.writeMessage("Ố ồ..")},exports.cmdDoAtk=async function({ctx,realm,FORMATION,MINE_ATK_PRICE_FACTOR,args}){if(!ctx.walletAcc)return void console.warn("wallet channel not ready. Please run wallet_unlock first");const tmp=args.split(" "),mineId=tmp[0],usePortal=(0,utils_1.boolFromString)(tmp[1]);if(!mineId)return void await ctx.ui.writeMessage("\tUsage: /atk <mineId> [usePortal = false]");const addvStats=await(0,myAdventure_1.refreshAdventureStatsForAddress)({realm,ctx},ctx.playerAddress||"");await ctx.ui.writeMessage(`roger that!. Start atk mineId:${mineId} usePortal:${usePortal}`),console.log({mineId,usePortal});const mineInfo=addvStats.targets[mineId];if(!mineInfo)return console.log("opps. Mine status changed"),void await ctx.ui.writeMessage("opps. Mine status changed. Retreat....");const poriants=FORMATION,index=index_1.Adventure.randAdventureSlot(3,mineInfo.farmerSlots),callData=ctx.contract.methods.support1(mineId,poriants,index,!usePortal).encodeABI();console.log({method:"support1",mineId,poriants,index,usePortal,callData});const web3GasPrice=await index_1.WalletActions.currentGasPrice({ctx}),factor=MINE_ATK_PRICE_FACTOR,tx={from:ctx.walletAcc.address,to:(0,pori_metadata_1.getIdleGameAddressSC)(ctx.env).address,data:callData,gasPrice:+web3GasPrice*factor};ctx.walletAcc||await ctx.ui.writeMessage("Sir! please accept tx in trust wallet");const txHash=await index_1.WalletActions.sendRequestForWalletConnectTx({ctx},tx,(r=>{ctx.ui.writeMessage(`on Receipt: ${r.transactionHash}`)}));txHash?await ctx.ui.writeMessage((0,pori_metadata_1.getChainExplorerTxHashLink)(ctx.env,txHash)):await ctx.ui.writeMessage("Ố ồ..")},exports.cmdDoSupport=async function({ctx,realm,args,SUPPORT_PORI,customSlotPick=defaultSupportSlotPick}){if(!ctx.walletAcc)return void console.warn("wallet channel not ready. Please run wallet_unlock first");const mineId=args.split(" ")[0];if(!mineId)return void await ctx.ui.writeMessage("\tUsage: /mine_support <mineId>");const mineInfo=(await(0,myAdventure_1.refreshAdventureStatsForAddress)({realm,ctx},ctx.playerAddress||"")).mines[mineId];if(!mineInfo)return console.log("opps. Mine status changed"),void await ctx.ui.writeMessage("opps. Mine not found");const isFarmer=mineInfo.isFarmer,pori=SUPPORT_PORI,slotIndex=await customSlotPick({mineInfo,isFarmer,pori,ctx});let callDataAbi="";callDataAbi=isFarmer?ctx.contract.methods.fortify(mineId,pori,slotIndex).encodeABI():ctx.contract.methods.support2(mineId,pori,slotIndex).encodeABI();const tx={from:ctx.walletAcc.address,to:(0,pori_metadata_1.getIdleGameAddressSC)(ctx.env).address,data:callDataAbi};ctx.walletAcc||await ctx.ui.writeMessage("Sir! please accept tx in trust wallet");const txHash=await index_1.WalletActions.sendRequestForWalletConnectTx({ctx},tx,(r=>{ctx.ui.writeMessage(`on Receipt: ${r.transactionHash}`)}));txHash?await ctx.ui.writeMessage((0,pori_metadata_1.getChainExplorerTxHashLink)(ctx.env,txHash)):await ctx.ui.writeMessage("Ố ồ..")},exports.cmdDoSBattle=async function({ctx,realm,args}){if(!ctx.walletAcc)return void console.warn("wallet channel not ready. Please run wallet_unlock first");const mineId=args.split(" ")[0];if(!mineId)return void await ctx.ui.writeMessage("\tUsage: /sbattle <mineId>");const playerAddress=ctx.playerAddress||"",mineInfo=(await(0,myAdventure_1.refreshAdventureStatsForAddress)({realm,ctx},playerAddress)).mines[mineId];if(!mineInfo)return void await ctx.ui.writeMessage("opps. Mine not found");await ctx.ui.writeMessage(`roger that!. SBattle for mine: ${mineId}`);const sCellInfo=await(0,adventure_1.getPoriansAtSCellSc)(ctx,mineId),sbattleCmd=await(0,sbattleSlotPick_1.sbattleSlotPick)({ctx,mineInfo,sCellInfo,isFarmer:!0});if(!sbattleCmd)return;const callData=ctx.contract.methods.swapPorians(sbattleCmd.missionId,sbattleCmd.srcIds,sbattleCmd.desIds,sbattleCmd.sTreasureIndex).encodeABI(),tx={from:ctx.walletAcc.address,to:(0,pori_metadata_1.getIdleGameAddressSC)(ctx.env).address,data:callData},txHash=await index_1.WalletActions.sendRequestForWalletConnectTx({ctx},tx,(r=>{ctx.ui.writeMessage(`on Receipt: ${r.transactionHash}`)}));txHash?await ctx.ui.writeMessage((0,pori_metadata_1.getChainExplorerTxHashLink)(ctx.env,txHash)):await ctx.ui.writeMessage("Ố ồ..")}},9123:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.genLast7DaysGraphData=exports.refreshAdventureStatsForAddress=void 0;const tslib_1=__webpack_require__(752),index_1=__webpack_require__(2664),Repos=tslib_1.__importStar(__webpack_require__(2098)),pori_metadata_1=__webpack_require__(2819),lodash_1=__webpack_require__(6517),moment_1=tslib_1.__importDefault(__webpack_require__(2245)),adventure_1=__webpack_require__(6611),url_1=__webpack_require__(7310);exports.refreshAdventureStatsForAddress=async function({realm,ctx,options={withGasPrice:!1,withPortal:!1,withPrice:!1}},addr){var _a,_b;const createdBlock=(0,pori_metadata_1.getIdleGameAddressSC)(ctx.env).createdBlock;await index_1.Input.updateEventDb(realm,ctx,{createdBlock});const activeAddr=addr,now=Date.now(),viewData=await index_1.DataView.computePlayerAdventure({realm,playerAddress:activeAddr,realmEventStore:await Repos.IdleGameSCEventRepo.findAll(realm)}),humanView={note:index_1.DataView.humanrizeNote(viewData),mines:{},targets:{},protentialTarget:[],activeMines:0,canDoNextAction:!1,nextActionAt:"",nextActionAtDate:new Date,nextAtkAt:"",nextAtkAtDate:new Date,gasPriceGWEI:""};for(const k of Object.keys(viewData.activeAdventures)){const value=viewData.activeAdventures[k];value.farmerAddress===activeAddr||value.supporterAddress===activeAddr?humanView.mines[k]=index_1.DataView.humanrizeAdventureInfo(ctx,realm,value,!0):"AdventureStarted"===value.state&&(humanView.targets[k]=index_1.DataView.humanrizeAdventureInfo(ctx,realm,value))}if(humanView.protentialTarget=Object.keys(humanView.targets).map((key=>{var _a,_b,_c;const val=humanView.targets[key],sinceSec=(now-new Date(null!==(_a=val.startTime)&&void 0!==_a?_a:0).valueOf())/1e3;return{link:val.link,mineId:val.mineId,hasBigReward:val.hasBigReward,startTimeLocalTime:new Date(null!==(_b=val.startTime)&&void 0!==_b?_b:0).toLocaleString(),startTime:new Date(null!==(_c=val.startTime)&&void 0!==_c?_c:0),sinceSec}})).sort(((a,b)=>+a.hasBigReward-+b.hasBigReward)),humanView.activeMines=Object.keys(humanView.mines).length,!1===humanView.note.readyToStart&&humanView.activeMines++,options.withGasPrice){const web3GasPrice=await index_1.WalletActions.currentGasPrice({ctx});humanView.gasPriceGWEI=ctx.web3.utils.fromWei(web3GasPrice,"gwei")}const timeViewMine=Object.values(humanView.mines),noBlock=timeViewMine.every((itm=>!!itm.canCollect)),nextActionAt=null===(_a=(0,lodash_1.maxBy)(timeViewMine,(v=>v.blockedTo.valueOf())))||void 0===_a?void 0:_a.blockedTo,nextAtkAt=null===(_b=(0,lodash_1.minBy)(timeViewMine.filter((itm=>itm.atkAt.valueOf()>now)),(v=>v.atkAt.valueOf())))||void 0===_b?void 0:_b.atkAt;humanView.canDoNextAction=humanView.note.readyToStart&&noBlock,nextActionAt&&(humanView.nextActionAt=`${nextActionAt.toLocaleString()} - ${(0,moment_1.default)(nextActionAt).fromNow()}`),humanView.nextActionAtDate=nextActionAt,nextAtkAt&&(humanView.nextAtkAt=`${nextAtkAt.toLocaleString()} - ${(0,moment_1.default)(nextAtkAt).fromNow()}`),humanView.nextAtkAtDate=nextAtkAt;const toDayNo=(0,moment_1.default)().startOf("D").unix();return humanView.todayStats=viewData.finishedAdventures[toDayNo],options.withPortal&&(humanView.portalInfo=await(0,adventure_1.queryPortalInfoSc)(ctx,addr)),options.withPrice&&(humanView.price=await(0,index_1.token2Usd)(ctx),humanView.todayStats&&(humanView.todayStats.rigyUsd=humanView.todayStats.totalRigy*humanView.price.rigy2Usd,humanView.todayStats.rikenUsd=humanView.todayStats.totalRiken*humanView.price.rken2Usd)),humanView},exports.genLast7DaysGraphData=async function({ctx,realm,playerAddress}){const viewData=await index_1.DataView.computePlayerAdventure({realm,playerAddress,realmEventStore:await Repos.IdleGameSCEventRepo.findAll(realm)}),last7Days=Object.entries(viewData.finishedAdventures).map((itm=>itm[1])).sort(((a,b)=>b.unixDay-a.unixDay)).slice(0,7).reverse(),graphData={labels:[],data1:[],data2:[]};for(const it of last7Days){const tmp=(0,moment_1.default)(it.timestamp).format("MMM-DD");graphData.labels.push(tmp),graphData.data1.push(Math.round(it.totalRigy).toString()),graphData.data2.push(Math.round(it.totalRiken).toString())}const url=new url_1.URL("https://quickchart.io/chart/render/sm-d5f8d67a-d271-4d30-9ae1-be744bd2627e");return url.searchParams.append("labels",graphData.labels.join(",")),url.searchParams.append("data1",graphData.data1.join(",")),{graphData,url:url.toString()}}},7343:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});__webpack_require__(752).__exportStar(__webpack_require__(6678),exports)},6678:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.humanrizeNote=exports.humanrizeAdventureInfo=exports.computePlayerAdventure=void 0;const tslib_1=__webpack_require__(752),pori_repositories_1=__webpack_require__(2098),pori_metadata_1=__webpack_require__(2819),moment_1=tslib_1.__importDefault(__webpack_require__(2245));function computeViewId(options){return`player:adventure:${options.playerAddress}`}exports.computePlayerAdventure=async function(options){var _a,_b,_c,_d,_e,_f,_g;const{realm,playerAddress}=options,lastViewIns=(computeViewId(options),await async function(options){const{realm}=options,viewId=computeViewId(options);let viewIns=await pori_repositories_1.DataViewRepo.findOne(realm,viewId);if(!viewIns){const defaultData=pori_repositories_1.DataViewModel.generate(viewId,"000000000000000000000000",function(options){return{playerAddress:options.playerAddress,activeAdventures:{},finishedAdventures:{},note:{}}}(options),"1");viewIns=await pori_repositories_1.DataViewRepo.createWithTx(realm,defaultData)}return viewIns}(options)),{cursor}=lastViewIns,viewData=JSON.parse(lastViewIns.data),allEvents=options.realmEventStore.filtered(`\n      _id > oid(${cursor}) && (\n        type="AdventureStarted" ||\n        type="AdventureSupported1" ||\n        type="AdventureFortified" ||\n        type="AdventureSupported2" ||\n        type="SBattleSwapped" ||\n        type="AdventureFinished"\n      )\n    `);if(allEvents.length<=0)return viewData;console.log("need to process",{playerAddress,count:allEvents.length});for(const it of allEvents)switch(it.type){case pori_metadata_1.EIdleGameSCEventType.AdventureStarted:{const evData=it.data,isFarmer=evData.farmer===playerAddress;viewData.activeAdventures[evData.mineId]={mineId:evData.mineId,state:"AdventureStarted",isFarmer,farmerAddress:evData.farmer,startTime:new Date(1e3*evData.startTime),farmerEndTime:new Date(1e3*evData.blockedTime),farmerPories:[...evData.porians],farmerRewardLevel:[...evData.rewardLevels],farmerSlots:[...evData.indexes]}}break;case pori_metadata_1.EIdleGameSCEventType.AdventureSupported1:{const evData=it.data,isSupporter=evData.helper===playerAddress,mineInfo=viewData.activeAdventures[evData.mineId];if(!mineInfo){console.log("missing",evData.mineId);break}if(!isSupporter&&!mineInfo.isFarmer){delete viewData.activeAdventures[evData.mineId];break}viewData.activeAdventures[evData.mineId]={...mineInfo,state:"AdventureSupported1",isSupporter,supporterEndTime:new Date(1e3*evData.blockedTime),supporterAddress:evData.helper,supporterPories:evData.porians,supporterRewardLevel:evData.rewardLevels,supporterSlots:evData.indexes}}break;case pori_metadata_1.EIdleGameSCEventType.AdventureFortified:{const evData=it.data,mineInfo=viewData.activeAdventures[evData.mineId];if(!mineInfo)break;if(!mineInfo.isSupporter&&!mineInfo.isFarmer){delete viewData.activeAdventures[evData.mineId];break}viewData.activeAdventures[evData.mineId]={...mineInfo,state:"AdventureFortified",farmerEndTime:new Date(1e3*evData.blockedTime),farmerPories:[...null!==(_a=mineInfo.farmerPories)&&void 0!==_a?_a:[],evData.porian],farmerRewardLevel:[...null!==(_b=mineInfo.farmerRewardLevel)&&void 0!==_b?_b:[],evData.rewardLevel],farmerSlots:[...null!==(_c=mineInfo.farmerSlots)&&void 0!==_c?_c:[],evData.index]}}break;case pori_metadata_1.EIdleGameSCEventType.AdventureSupported2:{const evData=it.data,mineInfo=viewData.activeAdventures[evData.mineId];if(!mineInfo)break;if(!mineInfo.isSupporter&&!mineInfo.isFarmer){delete viewData.activeAdventures[evData.mineId];break}viewData.activeAdventures[evData.mineId]={...mineInfo,state:"AdventureSupported2",supporterEndTime:new Date(1e3*evData.blockedTime),supporterPories:[...null!==(_d=mineInfo.supporterPories)&&void 0!==_d?_d:[],evData.porian],supporterRewardLevel:[...null!==(_e=mineInfo.supporterRewardLevel)&&void 0!==_e?_e:[],evData.rewardLevel],supporterSlots:[...null!==(_f=mineInfo.supporterSlots)&&void 0!==_f?_f:[],evData.index]}}break;case pori_metadata_1.EIdleGameSCEventType.SBattleSwapped:{const evData=it.data,mineInfo=viewData.activeAdventures[evData.mineId];if(!mineInfo)break;if(!mineInfo.isSupporter&&!mineInfo.isFarmer){delete viewData.activeAdventures[evData.mineId];break}const{farmer,from,to,porians}=evData;let rewardLevel,slots,pories;mineInfo.isFarmer?(pories=mineInfo.farmerPories||[],rewardLevel=mineInfo.farmerRewardLevel||[],slots=mineInfo.farmerSlots||[]):(pories=mineInfo.supporterPories||[],rewardLevel=mineInfo.supporterRewardLevel||[],slots=mineInfo.supporterSlots||[]);const poriIdOutside=+porians[0],poriIdInside=+porians[1],outsideIndex=pories.findIndex((itm=>itm===poriIdOutside)),insideIndex=pories.findIndex((itm=>itm===poriIdInside)),outsideRewardLevel=rewardLevel[outsideIndex],outsideSlot=slots[outsideIndex],insideRewardLevel=rewardLevel[insideIndex]||4,insideSlot=slots[insideIndex]||+to;poriIdInside&&(rewardLevel[insideIndex]=outsideRewardLevel,slots[insideIndex]=outsideSlot),rewardLevel[outsideIndex]=insideRewardLevel,slots[outsideIndex]=insideSlot,mineInfo.isFarmer?viewData.activeAdventures[evData.mineId]={...mineInfo,farmerPories:pories,farmerRewardLevel:rewardLevel,farmerSlots:slots}:viewData.activeAdventures[evData.mineId]={...mineInfo,supporterPories:pories,supporterRewardLevel:rewardLevel,supporterSlots:slots}}break;case pori_metadata_1.EIdleGameSCEventType.AdventureFinished:{const evData=it.data,mineInfo=viewData.activeAdventures[evData.mineId];if(!mineInfo)break;if(!mineInfo.isSupporter&&!mineInfo.isFarmer){delete viewData.activeAdventures[evData.mineId];break}delete viewData.activeAdventures[evData.mineId];const dateNo=(0,moment_1.default)(mineInfo.isSupporter?mineInfo.supporterEndTime:mineInfo.farmerEndTime).startOf("D").unix(),previous=viewData.finishedAdventures[dateNo]||{unixDay:dateNo,timestamp:new Date(1e3*dateNo),finishedMineIds:[],totalRigy:0,totalRiken:0},rigyReward=mineInfo.isSupporter?evData.helperReward1:evData.farmerReward1,rikenReward=mineInfo.isSupporter?evData.helperReward2:evData.farmerReward2;viewData.finishedAdventures[dateNo]={...previous,finishedMineIds:[...previous.finishedMineIds,mineInfo.mineId],totalRigy:previous.totalRigy+parseFloat(rigyReward.toString())/1e18,totalRiken:previous.totalRiken+parseFloat(rikenReward.toString())/1e18};const prevNote=null!==(_g=viewData.note)&&void 0!==_g?_g:{};viewData.note={...prevNote,lastMine:mineInfo.mineId,lastMineUnlockAt:mineInfo.isSupporter?mineInfo.supporterEndTime:mineInfo.farmerEndTime}}}return pori_repositories_1.DataViewRepo.txSync(realm,(()=>{lastViewIns.cursor=allEvents[allEvents.length-1]._id.toHexString(),lastViewIns.data=JSON.stringify(viewData)})),viewData},exports.humanrizeAdventureInfo=function(ctx,realm,advIno,withPoriePower=!1){var _a,_b,_c,_d,_e,_f;const startTime=advIno.startTime?new Date(advIno.startTime).toLocaleString():void 0,farmerEndTime=advIno.farmerEndTime?new Date(advIno.farmerEndTime).toLocaleString():void 0,supporterEndTime=advIno.supporterEndTime?new Date(advIno.supporterEndTime).toLocaleString():void 0;let canCollect;const now=Date.now();advIno.isFarmer&&advIno.farmerEndTime&&(canCollect=now>new Date(advIno.farmerEndTime).valueOf()),advIno.isSupporter&&advIno.supporterEndTime&&(canCollect=now>new Date(advIno.supporterEndTime).valueOf());const blockedTo=advIno.isFarmer?new Date(advIno.farmerEndTime):new Date(advIno.supporterEndTime),link=`${(0,pori_metadata_1.getAdventureBaseLink)(ctx.env)}/missions/${advIno.mineId}`,hasBigRewardFarmer=(null!==(_b=null===(_a=advIno.farmerRewardLevel)||void 0===_a?void 0:_a.filter((itm=>itm>=4)).length)&&void 0!==_b?_b:0)>0,hasBigRewardSupporter=(null!==(_d=null===(_c=advIno.supporterRewardLevel)||void 0===_c?void 0:_c.filter((itm=>itm>=4)).length)&&void 0!==_d?_d:0)>0,turnTime={},{farmerAtkStartAt,supporterAtkStartAt}=(0,pori_metadata_1.calculateMineTurnTime)(new Date(advIno.startTime||""));turnTime.farmerAtkTime=farmerAtkStartAt.toLocaleString(),turnTime.supporterAtkTime=supporterAtkStartAt.toLocaleString();const powers={};if(withPoriePower){const farmerPories=null!==(_e=advIno.farmerPories)&&void 0!==_e?_e:[];for(const id of farmerPories){const info=pori_repositories_1.PoriRepo.findOneSync(realm,id);info&&(powers[id]=info.minePower)}const supportPories=null!==(_f=advIno.supporterPories)&&void 0!==_f?_f:[];for(const id of supportPories){const info=pori_repositories_1.PoriRepo.findOneSync(realm,id);info&&(powers[id]=info.helpPower)}}return{link,canCollect,hasBigReward:hasBigRewardFarmer||hasBigRewardSupporter,...advIno,startTime,farmerEndTime,supporterEndTime,...turnTime,atkAt:advIno.isFarmer?farmerAtkStartAt:supporterAtkStartAt,blockedTo,powers}},exports.humanrizeNote=function(data){const note=data.note||{},res={...note};if(note.lastMineUnlockAt){const tmp=new Date(note.lastMineUnlockAt);res.lastMineUnlockAt=tmp.toLocaleString(),res.readyToStart=Date.now()>tmp.valueOf()}return res}},111:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.queryBinancePrice=void 0;const utils_1=__webpack_require__(9095);exports.queryBinancePrice=async function({ctx,pair}){const res=await utils_1.axiosIns.request({method:"get",baseURL:"https://api.binance.com",url:"/api/v3/ticker/price",params:{symbol:pair.toUpperCase()}});if(200!==res.status)throw new Error(`Request failed status ${res.status} - ${res.data}`);return JSON.parse(res.data)}},7051:function(__unused_webpack_module,exports,__webpack_require__){var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);var desc=Object.getOwnPropertyDescriptor(m,k);desc&&!("get"in desc?!m.__esModule:desc.writable||desc.configurable)||(desc={enumerable:!0,get:function(){return m[k]}}),Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,v){o.default=v}),__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.prototype.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);return __setModuleDefault(result,mod),result};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getKyberPoolRIKENPrice=exports.getKyberPoolRIGYPrice=void 0;const sdk_1=__webpack_require__(1366),pori_metadata_1=__webpack_require__(2819);let lazyProvider;const PairCacheDb={};async function getPairData(ctx,tokenA,tokenB){const KyberFactoryAddress=(0,pori_metadata_1.getKyberSwapFactoryAddress)(ctx.env),provider=await async function({ctx}){if(lazyProvider)return lazyProvider;const etherJs=await Promise.resolve().then((()=>__importStar(__webpack_require__(399)))),url=(0,pori_metadata_1.getWeb3NodeUriPolygonHttp)();return lazyProvider=new etherJs.JsonRpcProvider(url),lazyProvider}({ctx}),key=`${tokenA.address}_${tokenB.address}`;return PairCacheDb[key]||(PairCacheDb[key]=await sdk_1.Fetcher.fetchPairData(tokenA,tokenB,KyberFactoryAddress,provider)),PairCacheDb[key]}exports.getKyberPoolRIGYPrice=async function({ctx,amountInWei="1000000000000000000"}){const tokenInfo=(0,pori_metadata_1.getRIGYTokenInfoOnPolygon)(),RIGYToken=new sdk_1.Token(+tokenInfo.chainId,tokenInfo.tokenAddress,+tokenInfo.decimal,tokenInfo.symbol),pools=await getPairData(ctx,RIGYToken,sdk_1.WETH[RIGYToken.chainId]),route=new sdk_1.Route(pools,sdk_1.WETH[RIGYToken.chainId]),trade=new sdk_1.Trade(route,new sdk_1.TokenAmount(sdk_1.WETH[RIGYToken.chainId],amountInWei),sdk_1.TradeType.EXACT_INPUT);return{"RIGY->MATIC":trade.executionPrice.invert().toSignificant(6),"MATIC->RIGY":trade.executionPrice.toSignificant(6)}},exports.getKyberPoolRIKENPrice=async function({ctx,amountInWei="1000000000000000000"}){const tokenInfo=(0,pori_metadata_1.getRIKENTokenInfoOnPolygon)(),RIKENToken=new sdk_1.Token(+tokenInfo.chainId,tokenInfo.tokenAddress,+tokenInfo.decimal,tokenInfo.symbol),pools=await getPairData(ctx,RIKENToken,sdk_1.WETH[RIKENToken.chainId]),route=new sdk_1.Route(pools,sdk_1.WETH[RIKENToken.chainId]),trade=new sdk_1.Trade(route,new sdk_1.TokenAmount(sdk_1.WETH[RIKENToken.chainId],amountInWei),sdk_1.TradeType.EXACT_INPUT);return{"RIKEN->MATIC":trade.executionPrice.invert().toSignificant(6),"MATIC->RIKEN":trade.executionPrice.toSignificant(6)}}},9278:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.token2Usd=void 0;const binance_1=__webpack_require__(111),kyberPool_1=__webpack_require__(7051),Cache={rigy2Usd:0,rken2Usd:0,_time:0};exports.token2Usd=async function(ctx){const now=Date.now();if(now-Cache._time<6e4)return{rigy2Usd:Cache.rigy2Usd,rken2Usd:Cache.rken2Usd};const rigyPoolInfo=await(0,kyberPool_1.getKyberPoolRIGYPrice)({ctx}),rikenPoolInfo=await(0,kyberPool_1.getKyberPoolRIKENPrice)({ctx}),[maticBusd]=await Promise.all([(0,binance_1.queryBinancePrice)({ctx,pair:"MATICBUSD"})]);return Cache.rigy2Usd=+rigyPoolInfo["RIGY->MATIC"]*+maticBusd.price,Cache.rken2Usd=+rikenPoolInfo["RIKEN->MATIC"]*+maticBusd.price,Cache._time=now,{rigy2Usd:Cache.rigy2Usd,rken2Usd:Cache.rken2Usd}}},747:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateEventDb=void 0;const pori_metadata_1=__webpack_require__(2819),pori_repositories_1=__webpack_require__(2098),basic_1=__webpack_require__(1807),queryPoriApi_1=__webpack_require__(1491),transformIdleGameEvent2Database_1=__webpack_require__(3794);exports.updateEventDb=async function(realm,ctx,{createdBlock}){try{const scData=await pori_repositories_1.IdleGameSCMetadataRepo.getOrCreateWithTx(realm,"default",{updatedBlock:createdBlock,createdBlock});let from=scData.updatedBlock+1;const batchSize=500,headBlock=await ctx.web3.eth.getBlockNumber();for(console.log("top block",headBlock),console.log("context",scData.toJSON());from<headBlock;){const to=Math.min(from+batchSize,headBlock);console.log("scan from ",{from,to});const events=await(0,basic_1.scanEvents)(ctx,{filter:"allEvents",fromBlock:from,toBlock:to});from=to+1,pori_repositories_1.IdleGameSCMetadataRepo.txSync(realm,(()=>{scData.updatedBlock=to;const transformedEvents=events.map((itm=>pori_metadata_1.IdleGameSc.parseIdleGameScEvent(itm))).filter(Boolean);for(const iterator of transformedEvents)pori_repositories_1.IdleGameSCEventRepo.create(realm,pori_repositories_1.IdleGameSCEventDataModel.generate(iterator))}))}await async function(realm,ctx){const metadata=await pori_repositories_1.IdleGameSCMetadataRepo.findOne(realm,"default");if(!metadata)return;const knCursor=metadata.extras.knCursor||"000000000000000000000000",scanner=(await pori_repositories_1.IdleGameSCEventRepo.findAll(realm)).filtered(`_id > oid(${knCursor})`);console.log(`updateKnowleageDb need to update ${scanner.length} events`);const total=scanner.length;if(total<=0)return;const resolveNft=async id=>await(0,queryPoriApi_1.queryNftInfo)(id,ctx);let count=0;const saveInterval=10,onIt=(id,forceSave=!1)=>{count++,(forceSave||count%saveInterval==0)&&pori_repositories_1.IdleGameSCMetadataRepo.txSync(realm,(()=>{metadata.extras.knCursor=id.toHexString()})),console.log("onit",id,count/total)};await(0,transformIdleGameEvent2Database_1.transformIdleGameEvent2Database)(realm,Array.from(scanner.values()),resolveNft,onIt),onIt(scanner[scanner.length-1]._id,!0),console.log("updateKnowleageDb done")}(realm,ctx)}catch(error){console.error(error)}}},9390:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseDnaToBodyPart=void 0,exports.parseDnaToBodyPart=function(e){if(!/^[0-9A-Fa-f]{64}$/g.test(e))throw new Error("INVALID_DNA");const r=new RegExp("^(?<d_head_class>.{1})(?<d_head_type>.{1})(?<r1_head_class>.{1})(?<r1_head_type>.{1})(?<r2_head_class>.{1})(?<r2_head_type>.{1})(?<r3_head_class>.{1})(?<r3_head_type>.{1})(?<d_face_class>.{1})(?<d_face_type>.{1})(?<r1_face_class>.{1})(?<r1_face_type>.{1})(?<r2_face_class>.{1})(?<r2_face_type>.{1})(?<r3_face_class>.{1})(?<r3_face_type>.{1})(?<d_body_class>.{1})(?<d_body_type>.{1})(?<r1_body_class>.{1})(?<r1_body_type>.{1})(?<r2_body_class>.{1})(?<r2_body_type>.{1})(?<r3_body_class>.{1})(?<r3_body_type>.{1})(?<d_arm_class>.{1})(?<d_arm_type>.{1})(?<r1_arm_class>.{1})(?<r1_arm_type>.{1})(?<r2_arm_class>.{1})(?<r2_arm_type>.{1})(?<r3_arm_class>.{1})(?<r3_arm_type>.{1})(?<d_accessory_class>.{1})(?<d_accessory_type>.{1})(?<r1_accessory_class>.{1})(?<r1_accessory_type>.{1})(?<r2_accessory_class>.{1})(?<r2_accessory_type>.{1})(?<r3_accessory_class>.{1})(?<r3_accessory_type>.{1})(?<d_leg_class>.{1})(?<d_leg_type>.{1})(?<r1_leg_class>.{1})(?<r1_leg_type>.{1})(?<r2_leg_class>.{1})(?<r2_leg_type>.{1})(?<r3_leg_class>.{1})(?<r3_leg_type>.{1})(?<d_tail_class>.{1})(?<d_tail_type>.{1})(?<r1_tail_class>.{1})(?<r1_tail_type>.{1})(?<r2_tail_class>.{1})(?<r2_tail_type>.{1})(?<r3_tail_class>.{1})(?<r3_tail_type>.{1})(?<legendary>.{2})(?<reserved>.{6})$"),a=e.match(r).groups;a.legendary=Number("0x"+a.legendary),e=function(e){return{l_head:0<(1&e)?1:0,l_face:0<(2&e)?1:0,l_body:0<(4&e)?1:0,l_arm:0<(8&e)?1:0,l_accessory:0<(16&e)?1:0,l_leg:0<(32&e)?1:0,l_tail:0<(64&e)?1:0}}(a.legendary),a.l_head=e.l_head,a.l_face=e.l_face,a.l_body=e.l_body,a.l_arm=e.l_arm,a.l_accessory=e.l_accessory,a.l_leg=e.l_leg,a.l_tail=e.l_tail,a.species_type=Number("0x"+a.d_head_class),a.reserved=Number("0x"+a.reserved),a.d_head_class=Number("0x"+a.d_head_class),a.d_head_type=Number("0x"+a.d_head_type),a.r1_head_class=Number("0x"+a.r1_head_class),a.r1_head_type=Number("0x"+a.r1_head_type),a.r2_head_class=Number("0x"+a.r2_head_class),a.r2_head_type=Number("0x"+a.r2_head_type),a.r3_head_class=Number("0x"+a.r3_head_class),a.r3_head_type=Number("0x"+a.r3_head_type),a.d_face_class=Number("0x"+a.d_face_class),a.d_face_type=Number("0x"+a.d_face_type),a.r1_face_class=Number("0x"+a.r1_face_class),a.r1_face_type=Number("0x"+a.r1_face_type),a.r2_face_class=Number("0x"+a.r2_face_class),a.r2_face_type=Number("0x"+a.r2_face_type),a.r3_face_class=Number("0x"+a.r3_face_class),a.r3_face_type=Number("0x"+a.r3_face_type),a.d_body_class=Number("0x"+a.d_body_class),a.d_body_type=Number("0x"+a.d_body_type),a.r1_body_class=Number("0x"+a.r1_body_class),a.r1_body_type=Number("0x"+a.r1_body_type),a.r2_body_class=Number("0x"+a.r2_body_class),a.r2_body_type=Number("0x"+a.r2_body_type),a.r3_body_class=Number("0x"+a.r3_body_class),a.r3_body_type=Number("0x"+a.r3_body_type),a.d_arm_class=Number("0x"+a.d_arm_class),a.d_arm_type=Number("0x"+a.d_arm_type),a.r1_arm_class=Number("0x"+a.r1_arm_class),a.r1_arm_type=Number("0x"+a.r1_arm_type),a.r2_arm_class=Number("0x"+a.r2_arm_class),a.r2_arm_type=Number("0x"+a.r2_arm_type),a.r3_arm_class=Number("0x"+a.r3_arm_class),a.r3_arm_type=Number("0x"+a.r3_arm_type),a.d_accessory_class=Number("0x"+a.d_accessory_class),a.d_accessory_type=Number("0x"+a.d_accessory_type),a.r1_accessory_class=Number("0x"+a.r1_accessory_class),a.r1_accessory_type=Number("0x"+a.r1_accessory_type),a.r2_accessory_class=Number("0x"+a.r2_accessory_class),a.r2_accessory_type=Number("0x"+a.r2_accessory_type),a.r3_accessory_class=Number("0x"+a.r3_accessory_class),a.r3_accessory_type=Number("0x"+a.r3_accessory_type),a.d_leg_class=Number("0x"+a.d_leg_class),a.d_leg_type=Number("0x"+a.d_leg_type),a.r1_leg_class=Number("0x"+a.r1_leg_class),a.r1_leg_type=Number("0x"+a.r1_leg_type),a.r2_leg_class=Number("0x"+a.r2_leg_class),a.r2_leg_type=Number("0x"+a.r2_leg_type),a.r3_leg_class=Number("0x"+a.r3_leg_class),a.r3_leg_type=Number("0x"+a.r3_leg_type),a.d_tail_class=Number("0x"+a.d_tail_class),a.d_tail_type=Number("0x"+a.d_tail_type),a.r1_tail_class=Number("0x"+a.r1_tail_class),a.r1_tail_type=Number("0x"+a.r1_tail_type),a.r2_tail_class=Number("0x"+a.r2_tail_class),a.r2_tail_type=Number("0x"+a.r2_tail_type),a.r3_tail_class=Number("0x"+a.r3_tail_class),a.r3_tail_type=Number("0x"+a.r3_tail_type),a.species_class=function(e){return l.has(e)?l.get(e).name:null}(a.species_type),a.d_head_type_name=getTypeName(a.d_head_class,a.d_head_type),a.d_face_type_name=getTypeName(a.d_face_class,a.d_face_type),a.d_body_type_name=getTypeName(a.d_body_class,a.d_body_type),a.d_arm_type_name=getTypeName(a.d_arm_class,a.d_arm_type),a.d_accessory_type_name=getTypeName(a.d_accessory_class,a.d_accessory_type),a.d_leg_type_name=getTypeName(a.d_leg_class,a.d_leg_type),a.d_tail_type_name=getTypeName(a.d_tail_class,a.d_tail_type),a.r1_head_type_name=getTypeName(a.r1_head_class,a.r1_head_type),a.r1_face_type_name=getTypeName(a.r1_face_class,a.r1_face_type),a.r1_body_type_name=getTypeName(a.r1_body_class,a.r1_body_type),a.r1_arm_type_name=getTypeName(a.r1_arm_class,a.r1_arm_type),a.r1_accessory_type_name=getTypeName(a.r1_accessory_class,a.r1_accessory_type),a.r1_leg_type_name=getTypeName(a.r1_leg_class,a.r1_leg_type),a.r1_tail_type_name=getTypeName(a.r1_tail_class,a.r1_tail_type),a.r2_head_type_name=getTypeName(a.r2_head_class,a.r2_head_type),a.r2_face_type_name=getTypeName(a.r2_face_class,a.r2_face_type),a.r2_body_type_name=getTypeName(a.r2_body_class,a.r2_body_type),a.r2_arm_type_name=getTypeName(a.r2_arm_class,a.r2_arm_type),a.r2_accessory_type_name=getTypeName(a.r2_accessory_class,a.r2_accessory_type),a.r2_leg_type_name=getTypeName(a.r2_leg_class,a.r2_leg_type),a.r2_tail_type_name=getTypeName(a.r2_tail_class,a.r2_tail_type),a.r3_head_type_name=getTypeName(a.r3_head_class,a.r3_head_type),a.r3_face_type_name=getTypeName(a.r3_face_class,a.r3_face_type),a.r3_body_type_name=getTypeName(a.r3_body_class,a.r3_body_type),a.r3_arm_type_name=getTypeName(a.r3_arm_class,a.r3_arm_type),a.r3_accessory_type_name=getTypeName(a.r3_accessory_class,a.r3_accessory_type),a.r3_leg_type_name=getTypeName(a.r3_leg_class,a.r3_leg_type),a.r3_tail_type_name=getTypeName(a.r3_tail_class,a.r3_tail_type);let s=1;return a.d_head_type==a.d_body_type&&s++,a.d_face_type==a.d_body_type&&s++,a.d_arm_type==a.d_body_type&&s++,a.d_accessory_type==a.d_body_type&&s++,a.d_leg_type==a.d_body_type&&s++,a.d_tail_type==a.d_body_type&&s++,a.purity=s,{...a}};const t=new Map,a=new Map,s=new Map,n=new Map,_=new Map,c=new Map,o=new Map;t.set(1,"Chickie"),t.set(2,"Rampi"),t.set(3,"Ri Kong"),t.set(4,"Bruwan"),t.set(5,"Calico"),t.set(6,"Tiga"),t.set(7,"Mama Puncha"),a.set(1,"Doo Doo"),a.set(2,"Lumin"),a.set(3,"Cancihalcon"),a.set(4,"Nimo"),a.set(5,"Hoba"),a.set(6,"OctoHook"),a.set(7,"Blowish"),s.set(1,"Knowizall"),s.set(2,"Veneno"),s.set(3,"Wipe Genie"),s.set(4,"Apollyon"),s.set(5,"Frankender"),s.set(6,"Fio"),s.set(7,"Hocori"),_.set(1,"Willy Wheel"),_.set(2,"Drilla "),_.set(3,"Monica"),_.set(4,"Zeta"),_.set(5,"Sami"),_.set(6,"Gampo"),_.set(7,"Carry"),_.set(1,"Pozilla"),_.set(2,"Poceratop"),_.set(3,"Dinoxic"),_.set(4,"Pobarrian"),_.set(5,"Calepis "),_.set(6,"Teelop"),_.set(7,"Wyvo"),c.set(1,"Sig Sar"),c.set(2,"Brotopo"),c.set(3,"Pizzalien"),c.set(4,"Gree"),c.set(5,"Tototaco"),c.set(6,"Rupa"),c.set(7,"Trippy"),o.set(1,"Mysteria 1"),o.set(2,"Mysteria 2"),o.set(3,"Mysteria 3"),o.set(4,"Mysteria 4"),o.set(5,"Mysteria 5"),o.set(6,"Mysteria 6"),o.set(7,"Mysteria 7");const l=new Map;function getTypeName(r,t){if(l.has(r)){const e=l.get(r).typeNames;if(e.has(t))return e.get(t)}return null}l.set(1,{name:"Terra",typeNames:t}),l.set(2,{name:"Aqua",typeNames:a}),l.set(3,{name:"Magica",typeNames:s}),l.set(4,{name:"Mecha",typeNames:n}),l.set(5,{name:"Ancia",typeNames:_}),l.set(6,{name:"Stella",typeNames:c}),l.set(7,{name:"Mysteria",typeNames:o})},1491:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.queryMarketItems=exports.expandEngadedMission=exports.queryMarketInfo=exports.queryNftInfo=void 0;const pori_metadata_1=__webpack_require__(2819),pori_metadata_2=__webpack_require__(2819),utils_1=__webpack_require__(9095),adventure_1=__webpack_require__(6611),web3utils_1=__webpack_require__(2869);exports.queryNftInfo=async function(id,ctx={env:pori_metadata_2.ENV.Staging}){const baseURL=(0,pori_metadata_1.getAPILink)(ctx.env),res=await utils_1.axiosIns.request({method:"get",baseURL,url:`/api/v1/assets/${id}`});if(200!==res.status)throw new Error(`Request failed status ${res.status} - ${res.data}`);const data=JSON.parse(res.data);return data.ownerAddress=(0,web3utils_1.toChecksumAddress)(data.ownerAddress),data},exports.queryMarketInfo=async function({ctx}){var _a;const baseURL=(0,pori_metadata_1.getAPILink)(ctx.env),res=await utils_1.axiosIns.request({method:"get",baseURL,url:"/api/v1/assets",params:{status:"1",pageIndex:"0",pageSize:"35",sortBy:"price",sortOrder:"asc",minPrice:"0",maxPrice:"99000000",minNumOfBreeds:"0",maxNumOfBreeds:"5",minLegend:"0",maxLegend:"7",minMinePower:"0",maxMinePower:"500",minHelpPower:"0",maxHelpPower:"500",stage:"",type:"",poriClass:"",keyword:""}});if(200!==res.status)throw new Error(`Request failed status ${res.status} - ${res.data}`);return(null===(_a=JSON.parse(res.data))||void 0===_a?void 0:_a.items)||[]},exports.expandEngadedMission=async function({ctx,data}){return Promise.all(data.map((async itm=>{const engagedMission=await(0,adventure_1.queryMissiontOfPoriSc)(ctx,itm.tokenId);return{...itm,engagedMission}})))},exports.queryMarketItems=async function({ctx,pageSize=10}){var _a;const baseURL=(0,pori_metadata_1.getAPILink)(ctx.env),res=await utils_1.axiosIns.request({method:"get",baseURL,url:"/api/v1/item-orders",params:{pageIndex:0,pageSize,sortBy:"unitPrice",sortOrder:"asc",minPrice:0,maxPrice:99e6}});if(200!==res.status)throw new Error(`Request failed status ${res.status} - ${res.data}`);return(null===(_a=JSON.parse(res.data))||void 0===_a?void 0:_a.items)||[]}},3500:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.close=exports.init=void 0;const tslib_1=__webpack_require__(752),pori_metadata_1=__webpack_require__(2819),stream_1=__webpack_require__(2781),web3_1=tslib_1.__importDefault(__webpack_require__(8519));exports.init=async function(env){const uriws=(0,pori_metadata_1.getWeb3NodeUri)(env),urihttp=(0,pori_metadata_1.getWeb3NodeUriHttp)(env);uriws||urihttp||(console.error(`missing env NODE_URI_${env} or NODE_URI_${env}_HTTP`),process.exit(1));const provider=uriws?new web3_1.default.providers.WebsocketProvider(uriws):new web3_1.default.providers.HttpProvider(urihttp);console.log("use web3 provider",provider instanceof web3_1.default.providers.WebsocketProvider?"wss":"http");const web3=new web3_1.default(provider),idleGameSc=(0,pori_metadata_1.getIdleGameAddressSC)(env),portalSc=(0,pori_metadata_1.getPortalAddressSC)(env);if(!portalSc)throw new Error("missing portal sc config");const contract=new web3.eth.Contract(idleGameSc.abi,idleGameSc.address),contractPortal=new web3.eth.Contract(portalSc.abi,portalSc.address),{setting,custom}=(0,pori_metadata_1.getContextSetting)(env);return{contract,contractPortal,web3,provider,env,emiter:new stream_1.EventEmitter,ui:{writeMessage:async msg=>console.log(msg),editMessage:async(lastMsginfo,msg)=>{}},setting,custom}},exports.close=async function(ctx){ctx.provider.disconnect()}},3794:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.transformIdleGameEvent2Database=void 0;const Repos=__webpack_require__(752).__importStar(__webpack_require__(2098)),pori_metadata_1=__webpack_require__(2819);exports.transformIdleGameEvent2Database=async function(realm,events,resolveNftInfo,onIt){for(const it of events){switch(it.type){case pori_metadata_1.IdleGameSc.EIdleGameSCEventType.PorianDeposited:{const data=it.data,playerId=data.from,poriId=data.porian;let nftInfo;await Repos.PoriRepo.findOne(realm,poriId)||(nftInfo=await resolveNftInfo(poriId)),Repos.PlayerRepo.txSync(realm,(()=>{const playerObj=Repos.PlayerRepo.getOrCreate(realm,playerId,Repos.PlayerDataModel.generate(playerId,it.blockNo)),poriObj=Repos.PoriRepo.getOrCreate(realm,poriId,nftInfo?Repos.PoriDataModel.generate(nftInfo):{});poriObj.isActive=!0;playerObj.pories.findIndex((itm=>itm._id===poriId))>=0||playerObj.pories.push(poriObj)}))}break;case pori_metadata_1.IdleGameSc.EIdleGameSCEventType.PorianWithdrawed:{const data=it.data,playerId=data.to,poriId=data.porian,playerObj=await Repos.PlayerRepo.findOne(realm,playerId),poriObj=await Repos.PoriRepo.findOne(realm,poriId);if(!playerObj)break;Repos.PlayerRepo.txSync(realm,(()=>{poriObj&&(poriObj.isActive=!1);playerObj.pories.findIndex((itm=>itm._id===poriId))>=0&&(playerObj.pories=playerObj.pories.filter((itm=>itm._id!==poriId)))}))}break;case pori_metadata_1.IdleGameSc.EIdleGameSCEventType.GameDurationChanged:{const data=it.data,metadata=await Repos.IdleGameSCMetadataRepo.findOne(realm,"default");if(!metadata)break;Repos.IdleGameSCMetadataRepo.txSync(realm,(()=>{metadata.extras.turnDuration=data.turnDuration,metadata.extras.adventureDuration=data.adventureDuration}))}}onIt&&onIt(it._id)}}},2869:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.toChecksumAddress=exports.functionSignature=void 0;const web3=new(__webpack_require__(752).__importDefault(__webpack_require__(8519)).default);exports.functionSignature=function(inp){return web3.eth.abi.encodeFunctionSignature(inp)},exports.toChecksumAddress=function(inp){return web3.utils.toChecksumAddress(inp)}},5042:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.getMaticBalance=exports.getTokenBalance=void 0;const minABI=[{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],type:"function"}],contractForTokenCache={};exports.getTokenBalance=async function({ctx,erc20Address,walletAddress}){let contract=contractForTokenCache[erc20Address];contract||(contract=new ctx.web3.eth.Contract(minABI,erc20Address),contractForTokenCache[erc20Address]=contract);const res=await contract.methods.balanceOf(walletAddress).call();return parseInt(res)/10**18},exports.getMaticBalance=async function({ctx,walletAddress}){const balanceInWei=await ctx.web3.eth.getBalance(walletAddress);return+ctx.web3.utils.fromWei(balanceInWei)}},3684:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.addWalletConnectToContext=void 0;const tslib_1=__webpack_require__(752),client_1=tslib_1.__importDefault(__webpack_require__(6807)),qrcode_modal_1=tslib_1.__importDefault(__webpack_require__(8303)),fs_1=__webpack_require__(7147);class MySessionStorage{constructor(storagePath){console.log("MySessionStorage new",storagePath),this.storageId=storagePath}getSession(){if(this.storageId&&(0,fs_1.existsSync)(this.storageId)){return JSON.parse((0,fs_1.readFileSync)(this.storageId).toString())}return null}setSession(session){return this.storageId&&(0,fs_1.writeFileSync)(this.storageId,JSON.stringify(session)),session}removeSession(){this.storageId&&(0,fs_1.unlinkSync)(this.storageId)}}exports.addWalletConnectToContext=async function(ctx,sessionStoragePath){const storage=new MySessionStorage(sessionStoragePath),connector=new client_1.default({bridge:"https://bridge.walletconnect.org",qrcodeModal:qrcode_modal_1.default,session:storage.getSession(),clientMeta:{description:"Pori-Poc",url:"https://nodejs.org/en/",icons:["https://nodejs.org/static/images/logo.svg"],name:"Pori-Poc"}});connector._sessionStorage=storage,ctx.walletConnectChannel=connector,connector.connected||connector.createSession({chainId:137}),connector.on("connect",((error,payload)=>{if(error)throw error;const{accounts,chainId}=payload.params[0];console.info("wallet connect channel connected",{accounts,chainId})})),connector.on("session_update",((error,payload)=>{if(error)throw error;const{accounts,chainId}=payload.params[0];console.info("wallet connect channel session updated",{accounts,chainId})})),connector.on("disconnect",((error,payload)=>{if(error)throw error;console.info("wallet connect channel disconnected",{error,payload})}))}},4223:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.monitorTx=exports.currentGasPrice=exports.sendSignRequestForWalletConnectTx=exports.sendRequestForWalletConnectTx=void 0;const utils_1=__webpack_require__(9095),lodash_1=__webpack_require__(6517),index_1=__webpack_require__(2664),sendTxJobQueue=new utils_1.JobQueue;async function currentGasPrice({ctx}){return(0,lodash_1.isFunction)(ctx.custom.estimageGas)?await ctx.custom.estimageGas(ctx):await ctx.web3.eth.getGasPrice()}exports.sendRequestForWalletConnectTx=function({ctx},tx,onTxReceipt){return sendTxJobQueue.addJob((async()=>async function(ctx,tx,onTxReceipt){var _a;if(!ctx.walletAcc)return;const gasFactor=null!==(_a=ctx.setting.gasFactor)&&void 0!==_a?_a:1,defaultWeb3GasPrice=await currentGasPrice({ctx}),defaultNonce=await ctx.web3.eth.getTransactionCount(ctx.walletAcc.address),baseGas=Math.round(+defaultWeb3GasPrice*gasFactor);tx.gasPrice||1===gasFactor||await ctx.ui.writeMessage(`warning: with gasFactor = ${gasFactor}. total gas price = ${baseGas}`);const web3Tx={from:ctx.walletAcc.address,to:tx.to,data:tx.data,gas:tx.gas||"2000000",gasPrice:tx.gasPrice||baseGas,nonce:tx.nonce?parseInt(tx.nonce.toString()):defaultNonce},signedTx=await ctx.walletAcc.signTransaction(web3Tx);if(signedTx.rawTransaction){const txInfo=ctx.web3.eth.sendSignedTransaction(signedTx.rawTransaction);return txInfo.on("receipt",(r=>onTxReceipt&&onTxReceipt(r))),(await txInfo).transactionHash}return}(ctx,tx,onTxReceipt)))},exports.sendSignRequestForWalletConnectTx=function({ctx},tx){return async function(ctx,tx){if(!ctx.walletAcc)return;const defaultWeb3GasPrice=await index_1.WalletActions.currentGasPrice({ctx}),defaultNonce=await ctx.web3.eth.getTransactionCount(ctx.walletAcc.address),web3Tx={from:ctx.walletAcc.address,to:tx.to,data:tx.data,gas:tx.gas||"600000",gasPrice:tx.gasPrice||defaultWeb3GasPrice,nonce:tx.nonce?parseInt(tx.nonce.toString()):defaultNonce},signedTx=await ctx.walletAcc.signTransaction(web3Tx);if(signedTx.rawTransaction)return signedTx.rawTransaction.split("0x")[1];return signedTx.rawTransaction}(ctx,tx)},exports.currentGasPrice=currentGasPrice;exports.monitorTx=async function({ctx,txHash,timeoutMs=144e5}){let shouldRun=!0;const endAt=timeoutMs+Date.now();for(;shouldRun;){const info=await ctx.web3.eth.getTransactionReceipt(txHash);if(!info)return!1;if(info.blockNumber&&info.status)return!0;await(0,utils_1.waitForMs)(3e4),shouldRun=Date.now()>endAt}return!1}},4854:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.createWorkflow=void 0;const utils_1=__webpack_require__(9095);exports.createWorkflow=function(exec,id){const cancelDefered=new utils_1.Deferred,finishDefered=new utils_1.Deferred,state={id:null!=id?id:`workflow_simple_${Date.now()}`,startAt:new Date,data:{},currentStep:"0",finishDefered,abort:()=>cancelDefered.reject&&cancelDefered.reject(new Error("aborted")),start:()=>(doJob(),finishDefered.promise),updateState:func=>{func(),state.onChange&&state.onChange(state)},promiseWithAbort:p=>Promise.race([p,cancelDefered.promise])},doJob=async()=>{try{await exec(state),state.updateState((()=>{state.finishAt=new Date})),finishDefered.resolve(null)}catch(error){state.updateState((()=>{state.error=error})),finishDefered.reject(error)}};return state}},3953:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ENV=void 0,function(ENV){ENV.Staging="STAG",ENV.Prod="PROD",ENV.ProdPorichain="PROD_PORICHAIN"}(exports.ENV||(exports.ENV={}))},2819:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.IdleGameSc=exports.getDatastoreBackupKey=exports.getChainExplorerTxHashLink=exports.getMobileWalletApplink=exports.getContextSetting=exports.calculateMineTurnTime=exports.getPortalAddressSC=exports.getIdleGameAddressSC=exports.getMarketplayBaseLink=exports.getAdventureBaseLink=exports.getRIKENTokenInfo=exports.getRIKENTokenInfoOnPolygon=exports.getRIGYTokenInfo=exports.getRIGYTokenInfoOnPolygon=exports.getKyberSwapFactoryAddress=exports.getAPILink=exports.getWeb3NodeUriPolygonHttp=exports.getWeb3NodeUriHttp=exports.getWeb3NodeUri=exports.TURN_DURATION_SEC=exports.TEN_POWER_10_BN=exports.TEN_POWER_10=void 0;const tslib_1=__webpack_require__(752),commonTypes_1=__webpack_require__(3953),stagConfig=tslib_1.__importStar(__webpack_require__(1601)),prodConfig=tslib_1.__importStar(__webpack_require__(1465)),prodPoriChainConfig=tslib_1.__importStar(__webpack_require__(9655)),lodash_1=__webpack_require__(6517);exports.TEN_POWER_10=10**18,exports.TEN_POWER_10_BN=BigInt(10**18),exports.TURN_DURATION_SEC=1800,exports.getWeb3NodeUri=function(env){const key=`NODE_URI_${env}`.toUpperCase();return process.env[key]},exports.getWeb3NodeUriHttp=function(env){const key=`NODE_URI_${env}_HTTP`.toUpperCase();return process.env[key]},exports.getWeb3NodeUriPolygonHttp=function(){const key=`NODE_URI_${commonTypes_1.ENV.Prod}_HTTP`.toUpperCase();return process.env[key]},exports.getAPILink=function(env){return env===commonTypes_1.ENV.Staging?stagConfig.gameInfo.m.app.apiUrl:env===commonTypes_1.ENV.ProdPorichain?prodPoriChainConfig.gameInfo.m.app.apiUrl:prodConfig.gameInfo.m.app.apiUrl},exports.getKyberSwapFactoryAddress=function(env){return env===commonTypes_1.ENV.Staging?"0x7900309d0b1c8D3d665Ae40e712E8ba4FC4F5453":"0x5f1fe642060b5b9658c15721ea22e982643c095c"},exports.getRIGYTokenInfoOnPolygon=function(){const tokenConfig=prodConfig.gameInfo.m.app;return{symbol:tokenConfig.token.inGameSymbol,tokenAddress:tokenConfig.token.inGameAddress,decimal:tokenConfig.token.inGameDecimal,chainId:tokenConfig.rpcMetamask.chainId}},exports.getRIGYTokenInfo=function(env){let tokenConfig=prodConfig.gameInfo.m.app;return env===commonTypes_1.ENV.Staging?tokenConfig=stagConfig.gameInfo.m.app:env===commonTypes_1.ENV.ProdPorichain&&(tokenConfig=prodPoriChainConfig.gameInfo.m.app),{symbol:tokenConfig.token.inGameSymbol,tokenAddress:tokenConfig.token.inGameAddress,decimal:tokenConfig.token.inGameDecimal,chainId:tokenConfig.rpcMetamask.chainId}},exports.getRIKENTokenInfoOnPolygon=function(){const tokenConfig=prodConfig.gameInfo.m.app;return{symbol:tokenConfig.token.nativeSymbol,tokenAddress:tokenConfig.token.nativeAddress,decimal:tokenConfig.token.nativeDecimal,chainId:tokenConfig.rpcMetamask.chainId}},exports.getRIKENTokenInfo=function(env){let tokenConfig=prodConfig.gameInfo.m.app;return env===commonTypes_1.ENV.Staging?tokenConfig=stagConfig.gameInfo.m.app:env===commonTypes_1.ENV.ProdPorichain&&(tokenConfig=prodPoriChainConfig.gameInfo.m.app),{symbol:tokenConfig.token.nativeSymbol,tokenAddress:tokenConfig.token.nativeAddress,decimal:tokenConfig.token.nativeDecimal,chainId:tokenConfig.rpcMetamask.chainId}},exports.getAdventureBaseLink=function(env){return env===commonTypes_1.ENV.Staging?stagConfig.gameInfo.m.app.urlAdventure:env===commonTypes_1.ENV.ProdPorichain?prodPoriChainConfig.gameInfo.m.app.urlAdventure:prodConfig.gameInfo.m.app.urlAdventure},exports.getMarketplayBaseLink=function(env){return env===commonTypes_1.ENV.Staging?stagConfig.gameInfo.m.app.urlMarketplace:env===commonTypes_1.ENV.ProdPorichain?prodPoriChainConfig.gameInfo.m.app.urlMarketplace:prodConfig.gameInfo.m.app.urlMarketplace},exports.getIdleGameAddressSC=function(env){return env===commonTypes_1.ENV.Staging?{abi:stagConfig.ABI_IDLE,address:stagConfig.gameInfo.m.app.contractAddress.idleGameAddress,createdBlock:stagConfig.gameInfo.m.app.scCreatedBlock.idle}:env===commonTypes_1.ENV.ProdPorichain?{abi:prodPoriChainConfig.ABI_IDLE,address:prodPoriChainConfig.gameInfo.m.app.contractAddress.idleGameAddress,createdBlock:prodPoriChainConfig.gameInfo.m.app.scCreatedBlock.idle}:{abi:prodConfig.ABI_IDLE,address:prodConfig.gameInfo.m.app.contractAddress.idleGameAddress,createdBlock:prodConfig.gameInfo.m.app.scCreatedBlock.idle}},exports.getPortalAddressSC=function(env){return env===commonTypes_1.ENV.ProdPorichain?{abi:prodPoriChainConfig.ABI_PORTAL,address:prodPoriChainConfig.gameInfo.m.app.contractAddress.rainbowPortal}:null},exports.calculateMineTurnTime=function(startTime){return{farmerAtkStartAt:new Date(startTime.valueOf()+1e3*exports.TURN_DURATION_SEC),supporterAtkStartAt:new Date(startTime.valueOf()+2*exports.TURN_DURATION_SEC*1e3)}},exports.getContextSetting=function(env){const safeGweith=env===commonTypes_1.ENV.ProdPorichain?5e3:80,autoPlayMicroDelayMs=env===commonTypes_1.ENV.ProdPorichain?1e4:3e3;let estimageGas;return env===commonTypes_1.ENV.ProdPorichain&&(estimageGas=async ctx=>{const blockInfo=await ctx.web3.eth.getBlock("latest"),pendingTx=await Promise.all(blockInfo.transactions.map((itm=>ctx.web3.eth.getTransaction(itm))));if((0,lodash_1.isEmpty)(pendingTx))return ctx.web3.utils.toWei("5000","gwei");const avgGas=(0,lodash_1.mean)(pendingTx.filter((itm=>+itm.gasPrice>0)).map((itm=>+itm.gasPrice)));return Math.round(avgGas).toString()}),{setting:{gasFactor:1,safeGweith,autoPlayMicroDelayMs},custom:{estimageGas}}},exports.getMobileWalletApplink=function(env,link){if(env===commonTypes_1.ENV.ProdPorichain){return`https://metamask.app.link/dapp/${link.split("https://")[1]}`}return`https://link.trustwallet.com/open_url?url=${link}&coin_id=966`},exports.getChainExplorerTxHashLink=function(env,txHash){return env===commonTypes_1.ENV.ProdPorichain?`https://explorer.porichain.io/tx/${txHash}`:`https://polygonscan.com/tx/${txHash}`},exports.getDatastoreBackupKey=function(env){return env===commonTypes_1.ENV.ProdPorichain?"porichain-db-realm":"pori-db-realm"},tslib_1.__exportStar(__webpack_require__(3953),exports),exports.IdleGameSc=tslib_1.__importStar(__webpack_require__(2520)),tslib_1.__exportStar(__webpack_require__(1295),exports)},3659:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseIdleGameScEvent=void 0;const web3_1=__webpack_require__(752).__importDefault(__webpack_require__(8519)),utils_1=__webpack_require__(9095),type_idleGame_1=__webpack_require__(1295);exports.parseIdleGameScEvent=function(eventInfo){let evType,data;if(eventInfo.event)evType=eventInfo.event;else{const rawTopic=eventInfo.signature||eventInfo.raw.topics[0];evType=type_idleGame_1.IdleGameSCEventInvSignatureTable[rawTopic]}if(!evType)return null;switch(evType){case type_idleGame_1.EIdleGameSCEventType.AdventureStarted:data={mineId:(0,utils_1.toNumber)(eventInfo.returnValues.mineId),farmer:eventInfo.returnValues.farmer,startTime:(0,utils_1.toNumber)(eventInfo.returnValues.startTime),blockedTime:(0,utils_1.toNumber)(eventInfo.returnValues.blockedTime),porians:(0,utils_1.transformArrayElementToNumber)(eventInfo.returnValues.porians),indexes:(0,utils_1.transformArrayElementToNumber)(eventInfo.returnValues.indexes),rewardLevels:(0,utils_1.transformArrayElementToNumber)(eventInfo.returnValues.rewardLevels)};break;case type_idleGame_1.EIdleGameSCEventType.AdventureFinished:data={mineId:(0,utils_1.toNumber)(eventInfo.returnValues.mineId),winner:eventInfo.returnValues.winner,fragments:(0,utils_1.toNumber)(eventInfo.returnValues.fragments),farmerReward1:(0,utils_1.toDecimal128)(eventInfo.returnValues.farmerReward1),farmerReward2:(0,utils_1.toDecimal128)(eventInfo.returnValues.farmerReward2),helperReward1:(0,utils_1.toDecimal128)(eventInfo.returnValues.helperReward1),helperReward2:(0,utils_1.toDecimal128)(eventInfo.returnValues.helperReward2)};break;case type_idleGame_1.EIdleGameSCEventType.AdventureFortified:data={mineId:(0,utils_1.toNumber)(eventInfo.returnValues.mineId),porian:(0,utils_1.toNumber)(eventInfo.returnValues.porian),index:(0,utils_1.toNumber)(eventInfo.returnValues.index),rewardLevel:(0,utils_1.toNumber)(eventInfo.returnValues.rewardLevel),blockedTime:(0,utils_1.toNumber)(eventInfo.returnValues.blockedTime)};break;case type_idleGame_1.EIdleGameSCEventType.AdventureSupported1:data={mineId:(0,utils_1.toNumber)(eventInfo.returnValues.mineId),helper:eventInfo.returnValues.helper,porians:(0,utils_1.transformArrayElementToNumber)(eventInfo.returnValues.porians),indexes:(0,utils_1.transformArrayElementToNumber)(eventInfo.returnValues.indexes),rewardLevels:(0,utils_1.transformArrayElementToNumber)(eventInfo.returnValues.rewardLevels),blockedTime:(0,utils_1.toNumber)(eventInfo.returnValues.blockedTime)};break;case type_idleGame_1.EIdleGameSCEventType.AdventureSupported2:data={mineId:(0,utils_1.toNumber)(eventInfo.returnValues.mineId),porian:(0,utils_1.toNumber)(eventInfo.returnValues.porian),index:(0,utils_1.toNumber)(eventInfo.returnValues.index),rewardLevel:(0,utils_1.toNumber)(eventInfo.returnValues.rewardLevel),blockedTime:(0,utils_1.toNumber)(eventInfo.returnValues.blockedTime)};break;case type_idleGame_1.EIdleGameSCEventType.PorianDeposited:data={from:eventInfo.returnValues.from,porian:(0,utils_1.toNumber)(eventInfo.returnValues.porian),expiredAt:(0,utils_1.toNumber)(eventInfo.returnValues.expiredAt)};break;case type_idleGame_1.EIdleGameSCEventType.PorianWithdrawed:data={to:eventInfo.returnValues.to,porian:(0,utils_1.toNumber)(eventInfo.returnValues.porian)};break;case type_idleGame_1.EIdleGameSCEventType.GameDurationChanged:data={adventureDuration:(0,utils_1.toNumber)(eventInfo.returnValues.adventureDuration),turnDuration:(0,utils_1.toNumber)(eventInfo.returnValues.turnDuration)};break;case type_idleGame_1.EIdleGameSCEventType.SBattleSwapped:data=function(rawData){const tmp=(0,utils_1.splitPackedHexBy32Bytes)(rawData),mineId=parseInt(tmp[0],16),address=web3_1.default.utils.toChecksumAddress(`0x${tmp[1].slice(24,tmp[1].length)}`),porianOutside=parseInt(tmp[2],16),porianInside=parseInt(tmp[3],16),fromIndex=parseInt(tmp[4],16),toIndex=parseInt(tmp[5],16);return{mineId,farmer:address,porians:[porianOutside,porianInside],from:fromIndex.toString(),to:toIndex.toString()}}(eventInfo.raw.data)}return{type:evType,txHash:eventInfo.transactionHash,blockNo:eventInfo.blockNumber,data}}},2520:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=__webpack_require__(752);tslib_1.__exportStar(__webpack_require__(3659),exports),tslib_1.__exportStar(__webpack_require__(1295),exports)},1295:(__unused_webpack_module,exports)=>{var EIdleGameSCEventType;Object.defineProperty(exports,"__esModule",{value:!0}),exports.AllIdleGameEvents=exports.IdleGameSCEventInvSignatureTable=exports.IdleGameSCEventSignatureTable=exports.EIdleGameSCEventType=void 0,function(EIdleGameSCEventType){EIdleGameSCEventType.AdventureFinished="AdventureFinished",EIdleGameSCEventType.AdventureFortified="AdventureFortified",EIdleGameSCEventType.AdventureStarted="AdventureStarted",EIdleGameSCEventType.AdventureSupported1="AdventureSupported1",EIdleGameSCEventType.AdventureSupported2="AdventureSupported2",EIdleGameSCEventType.PorianDeposited="PorianDeposited",EIdleGameSCEventType.PorianWithdrawed="PorianWithdrawed",EIdleGameSCEventType.GameDurationChanged="GameDurationChanged",EIdleGameSCEventType.SBattleSwapped="SBattleSwapped"}(EIdleGameSCEventType=exports.EIdleGameSCEventType||(exports.EIdleGameSCEventType={})),exports.IdleGameSCEventSignatureTable={[EIdleGameSCEventType.AdventureFinished]:"0xacba132576685783d626ee7ff7486ac6cf8580b51ca1ef49ee36edb6303ac735",[EIdleGameSCEventType.AdventureFortified]:"0x71b4d764a280d810a1907567eb53bcf7ebe267f0d94d40d2a5f20009e7b73569",[EIdleGameSCEventType.AdventureStarted]:"0xd498194e39f0d0d9426ee530bd16b2182b34d07d968365c8fdcaf73c5a6d0ac5",[EIdleGameSCEventType.AdventureSupported1]:"0xbe2e74f68284a904ef29e10f3e20b2c9bb540481fb9903c1aead3e26cc56f8b1",[EIdleGameSCEventType.AdventureSupported2]:"0x6dbf0858232497280bfdf35e37adf2002793779d07d4f48947b17509c71dd41c",[EIdleGameSCEventType.PorianDeposited]:"0xc42131d410ea79f1eafecd549df9a392681974b7f4d9f4d78c216ea12b6766e8",[EIdleGameSCEventType.PorianWithdrawed]:"0x44402a61584354899786311a4f0c7bf924b31db70b5ebef891d88cee08156ed5",[EIdleGameSCEventType.GameDurationChanged]:"0xc62be04bfb76e5e364578771d33bb80ebbea7219b67ba068fb4bbdaf83e4a3c0",[EIdleGameSCEventType.SBattleSwapped]:"0x6bdac8de130455f3dbd97b2916ff758c9cb534e9770af694954b63b76169d728"},exports.IdleGameSCEventInvSignatureTable={"0x6bdac8de130455f3dbd97b2916ff758c9cb534e9770af694954b63b76169d728":EIdleGameSCEventType.SBattleSwapped},exports.AllIdleGameEvents=Object.keys(exports.IdleGameSCEventSignatureTable)},9655:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.gameInfo=exports.ABI_PORTAL=exports.ABI_MARKETPLACE=exports.ABI_RENTAL=exports.ABI_IDLE=void 0,exports.ABI_IDLE=JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":true,"internalType":"uint256","name":"fragments","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"farmerReward1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"farmerReward2","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"helperReward1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"helperReward2","type":"uint256"}],"name":"AdventureFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"index","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rewardLevel","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureFortified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"farmer","type":"address"},{"indexed":true,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"indexed":false,"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"indexed":false,"internalType":"uint8[3]","name":"rewardLevels","type":"uint8[3]"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"helper","type":"address"},{"indexed":false,"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"indexed":false,"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"indexed":false,"internalType":"uint8[3]","name":"rewardLevels","type":"uint8[3]"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureSupported1","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"index","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rewardLevel","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureSupported2","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"FragmentConfigsChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"adventureDuration","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"turnDuration","type":"uint256"}],"name":"GameDurationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint8","name":"env","type":"uint8"}],"name":"GameEnvChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"NoFragments","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"porianNFT","type":"address"},{"indexed":true,"internalType":"address","name":"porianPower","type":"address"},{"indexed":true,"internalType":"address","name":"rentalCentre","type":"address"}],"name":"PorianContractAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"expiredAt","type":"uint256"}],"name":"PorianDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"}],"name":"PorianWithdrawed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rentalFee","type":"uint256"},{"indexed":true,"internalType":"address","name":"reservePool","type":"address"}],"name":"RentalConfigsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"rigyToken","type":"address"},{"indexed":false,"internalType":"address","name":"rikenToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"rigyReward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rikenReward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"winRatio","type":"uint256"}],"name":"RewardConfigsChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rewardLevel","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"rewardRatio","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amountCell","type":"uint256"}],"name":"RewardLevelChanged","type":"event"},{"inputs":[],"name":"adventureDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"blockedTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decreasedTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"env","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mechaDiscount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mines","outputs":[{"internalType":"enum IdleGame.MiningState","name":"state","type":"uint8"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"farmer","type":"tuple"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"helper","type":"tuple"},{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mission2Riken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianNFT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianPower","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"portalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"portalInfos","outputs":[{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint256","name":"supplied","type":"uint256"},{"internalType":"uint256","name":"locked","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rentalCentre","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rentalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rentalPriceOf","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint128","name":"price","type":"uint128"},{"internalType":"uint128","name":"endTime","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"reservePool","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rewardLevels","outputs":[{"internalType":"uint256","name":"rewardRatio","type":"uint256"},{"internalType":"uint256","name":"amountCell","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rigyReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rigyToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rikenReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rikenToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalFragments","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"turnDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_adventureDuration","type":"uint256"},{"internalType":"uint256","name":"_turnDuration","type":"uint256"}],"name":"setGameDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"setGameEnv","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[4]","name":"rewardRatios","type":"uint256[4]"},{"internalType":"uint256[4]","name":"amountCells","type":"uint256[4]"}],"name":"setRewardLevels","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rigyToken","type":"address"},{"internalType":"address","name":"_rikenToken","type":"address"},{"internalType":"uint256","name":"_rigyReward","type":"uint256"},{"internalType":"uint256","name":"_rikenReward","type":"uint256"},{"internalType":"uint256","name":"_winRatio","type":"uint256"}],"name":"setRewardConfigs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_porianNFT","type":"address"},{"internalType":"address","name":"_porianPower","type":"address"},{"internalType":"address","name":"_rentalCentre","type":"address"}],"name":"setPorianContractAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fragmentRate","type":"uint256"},{"internalType":"uint256","name":"_fragmentAmount","type":"uint256"},{"internalType":"address","name":"_fragmentToken","type":"address"}],"name":"setFragmentConfigs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"porian","type":"uint256"}],"name":"getOwnerNowOf","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"porian","type":"uint256"}],"name":"notExisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"expiredAt","type":"uint256"},{"internalType":"bytes12","name":"flags","type":"bytes12"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onAuthorized","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"porians","type":"uint256[]"}],"name":"withdrawPorians","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"porianID","type":"uint256"},{"internalType":"uint256","name":"atTime","type":"uint256"}],"name":"getOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"}],"name":"isMecha","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"internalType":"bool","name":"notPortal","type":"bool"}],"name":"startAdventure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"internalType":"bool","name":"notPortal","type":"bool"}],"name":"support1","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256","name":"porian","type":"uint256"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"fortify","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256","name":"porian","type":"uint256"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"support2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"}],"name":"finish","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"},{"internalType":"uint256","name":"mission","type":"uint256"}],"name":"getPortalInfoOf","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"bytes12","name":"_selectedCells","type":"bytes12"}],"name":"_calculateNormalReward","outputs":[{"internalType":"uint256","name":"reward1","type":"uint256"},{"internalType":"uint256","name":"reward2","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"enum IdleGame.MiningState","name":"state","type":"uint8"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"farmer","type":"tuple"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"helper","type":"tuple"},{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"internalType":"struct IdleGame.MineInfo","name":"m","type":"tuple"},{"internalType":"uint8","name":"_env","type":"uint8"},{"internalType":"uint256","name":"fRigyReward","type":"uint256"},{"internalType":"uint256","name":"fRikenReward","type":"uint256"},{"internalType":"uint256","name":"hRigyReward","type":"uint256"},{"internalType":"uint256","name":"hRikenReward","type":"uint256"}],"name":"_calculateBigReward","outputs":[{"internalType":"address","name":"winner","type":"address"},{"internalType":"uint256","name":"fragments","type":"uint256"},{"internalType":"uint256","name":"fRigyRewardNew","type":"uint256"},{"internalType":"uint256","name":"fRikenRewardNew","type":"uint256"},{"internalType":"uint256","name":"hRigyRewardNew","type":"uint256"},{"internalType":"uint256","name":"hRikenRewardNew","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"atkPowerOf","outputs":[{"internalType":"uint256","name":"atkPower","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"defPowerOf","outputs":[{"internalType":"uint256","name":"defPower","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"randomRewardLevel","outputs":[{"internalType":"uint8","name":"rewardLevel","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"uint8","name":"level","type":"uint8"},{"internalType":"uint8","name":"joined","type":"uint8"}],"name":"setRewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"getRewardInfo","outputs":[{"internalType":"uint8","name":"level","type":"uint8"},{"internalType":"uint8","name":"joined","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"setEnv2RewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"getEnvOf","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"setStartTime2RewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"getStartTimeOfRewardMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"level","type":"uint256"},{"internalType":"uint256","name":"mode","type":"uint256"}],"name":"getRewardOf","outputs":[{"internalType":"uint256","name":"_rigyReward","type":"uint256"},{"internalType":"uint256","name":"_rikenReward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"ep","type":"uint256"},{"internalType":"uint256","name":"ap","type":"uint256"}],"name":"getESB","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"rikenAmounts","type":"uint256[]"},{"internalType":"uint256","name":"_mechaDiscount","type":"uint256"},{"internalType":"uint256","name":"capacityRiken","type":"uint256"},{"internalType":"uint128","name":"missionLimit","type":"uint128"},{"internalType":"uint256","name":"_decreasedTime","type":"uint256"}],"name":"setRikenPortalConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"}],"name":"portalInfoOf","outputs":[{"internalType":"uint256","name":"suppliedRiken","type":"uint256"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"},{"internalType":"uint256","name":"availableRiken","type":"uint256"},{"internalType":"uint256","name":"capacityRiken","type":"uint256"},{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint128","name":"capacityMissions","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missions","type":"uint256"},{"internalType":"bool","name":"_isMecha","type":"bool"}],"name":"getRikenAmount","outputs":[{"internalType":"uint256","name":"rikenAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"name":"sqrt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"missionOfPori","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missionId","type":"uint256"},{"internalType":"bool","name":"isAP","type":"bool"}],"name":"getPoriansAtSCell","outputs":[{"internalType":"uint256","name":"id1","type":"uint256"},{"internalType":"uint256","name":"id2","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missionId","type":"uint256"},{"internalType":"uint256[]","name":"srcIds","type":"uint256[]"},{"internalType":"uint256[]","name":"desIds","type":"uint256[]"},{"internalType":"uint8","name":"sTreasure","type":"uint8"}],"name":"swapPorians","outputs":[],"stateMutability":"nonpayable","type":"function"}]'),exports.ABI_RENTAL=JSON.parse('[{"inputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"yes","type":"bool"}],"name":"AutoRenewSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPricePerSec","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"ItemInfoChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"pricePerSec","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"ItemListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"renter","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"pricePerSec","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expiredAt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"}],"name":"ItemRented","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"ItemUnlisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MarketFeeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldNFTToken","type":"address"},{"indexed":false,"internalType":"address","name":"newNFTToken","type":"address"}],"name":"NFTTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPaymentToken","type":"address"},{"indexed":false,"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"PaymentTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPricePerSec","type":"uint256"}],"name":"PricePerSecChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"RentalTimeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldReservePool","type":"address"},{"indexed":false,"internalType":"address","name":"newReservePool","type":"address"}],"name":"ReservePoolChanged","type":"event"},{"inputs":[],"name":"A_HUNDRED_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"pricePerSec","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"listItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"newPricePerSec","type":"uint256"}],"name":"changePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"newPricePerSec","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"changeItemInfo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"unlistItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"rentalTime","type":"uint256"}],"name":"rentItem","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"bool","name":"yes","type":"bool"}],"name":"setAutoRenew","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"setRentalTime","outputs":[],"stateMutability":"nonpayable","type":"function"}]'),exports.ABI_MARKETPLACE=JSON.parse('[{"inputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"}],"name":"ItemSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemUnlisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MarketFeeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldNFTToken","type":"address"},{"indexed":true,"internalType":"address","name":"newNFTToken","type":"address"}],"name":"NFTTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldPaymentToken","type":"address"},{"indexed":true,"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"PaymentTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"PriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldReservePool","type":"address"},{"indexed":true,"internalType":"address","name":"newReservePool","type":"address"}],"name":"ReservePoolChanged","type":"event"},{"inputs":[],"name":"A_HUNDRED_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"changeFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"changePaymentToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newNFTToken","type":"address"}],"name":"changeNFTToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newReservePool","type":"address"}],"name":"changeReservePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"listItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"},{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"changePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"unlistItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"buyItem","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"getItem","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"enum Marketplace.ItemState","name":"state","type":"uint8"},{"internalType":"address","name":"buyer","type":"address"}],"internalType":"struct Marketplace.MarketItem","name":"item","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalItems","outputs":[{"internalType":"uint256","name":"totalItems","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getConfigs","outputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"}]'),exports.ABI_PORTAL=JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RikenDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RikenWithdrawn","type":"event"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"addressOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missionId","type":"uint256"},{"internalType":"address","name":"explorer","type":"address"},{"internalType":"address","name":"assistant","type":"address"}],"name":"closePortal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"configuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"configure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"},{"internalType":"uint256","name":"missionId","type":"uint256"}],"name":"getPortalInfoOf","outputs":[{"internalType":"bool","name":"expressMode","type":"bool"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missionCount","type":"uint256"},{"internalType":"bool","name":"discounted","type":"bool"}],"name":"getRikenAmount","outputs":[{"internalType":"uint256","name":"rikenAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"}],"name":"hasMecha","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"missionRiken","type":"uint256[]"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"porianId","type":"uint256"}],"name":"isMecha","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mission2Riken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"},{"internalType":"uint256","name":"missionId","type":"uint256"}],"name":"missionInfo","outputs":[{"internalType":"bool","name":"expressMode","type":"bool"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"bool","name":"expressMode","type":"bool"},{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"}],"name":"openPortal","outputs":[{"internalType":"uint256","name":"duration","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianNFT","outputs":[{"internalType":"contract Porian","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"portalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"}],"name":"portalInfoOf","outputs":[{"internalType":"uint256","name":"suppliedRiken","type":"uint256"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"},{"internalType":"uint256","name":"availableRiken","type":"uint256"},{"internalType":"uint256","name":"capacityRiken","type":"uint256"},{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint128","name":"capacityMissions","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"portalInfos","outputs":[{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint256","name":"supplied","type":"uint256"},{"internalType":"uint256","name":"locked","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"riken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"missionRiken","type":"uint256[]"}],"name":"setMissionRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawRiken","outputs":[],"stateMutability":"nonpayable","type":"function"}]'),exports.gameInfo={m:{app:{name:'"PoriAdventureGame";',version:"'1.0.0';",apiUrl:"https://porichain-api.poriverse.io",apiKey:"3537a676-6ad9-462a-ae31-3cc2dd6f8c1d",apiSecretKey:"55cdeacd6ef64abc90097ecc5def8ab1044d968892714cff833a11357c1f4168",locale:"en",fallbackLocale:"en",urlAdventure:"https://adventure.porichain.io",urlMarketplace:"https://marketplace.porichain.io",linkPori2D:"https://photos.poriverse.io",linkPori3D:"https://3d-model.poriverse.io/index.html",token:{nativeSymbol:"RIKEN",nativeAddress:"0x57DF4ACC269e5F04be0f6e4d5b26d9467b71706e",nativeDecimal:"18",nativeId:"tether",inGameSymbol:"RIGY",inGameAddress:"0xa31D195021dDb415E3937E5f846408b02A9d8419",inGameDecimal:"18",inGameId:"siacoin",fragmentSymbol:"FRAGMENT",fragmentAddress:"0xC0a2792fE016c2d4f1b9e30862b08287AE9Fcc68",fragmentDecimal:"0"},scCreatedBlock:{idle:7643},contractAddress:{PoriNFTBreedable:"0xe27C1017907Db12cb377d4746cA3435B2027514C",poriBreedingRule:"0x7DB415742ff3393c954262B03D1E719871547F0D",marketplaceAddress:"0x2d6957F05AFD85697305b7243C76664f7cefaDF9",rentalAddress:"0xdc6729725B29779752f45C2Ef3F5384cbA6cC0BA",idleGameAddress:"0xd678f37434d06Fc3Eb43c11024998FAaFd411881",rainbowPortal:"0x5712696231255765aeFBafe78dd7849B60C190c4",poriLensAddress:"0xB73B8A250B317D52eD88E9b510919eCFAE5923a0",itemsAddress:"0xA5e16E6bac094c1B38c64d3e0590c3b42f78e669",multicallAddress:"0x309f6E71d91BdC916Aab66C737719e242E36f2E3"},rpcMetamask:{chainId:"52861"}}},n:{chainId:"0x89",chainName:"Polygon Mainnet",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://rpc-mainnet.maticvigil.com/v1/ca075eb5895f0ea35c4c45a026ad062cd5153437"],blockExplorerUrls:["https://polygonscan.com/"]},b:{Terra:"1",Aqua:"2",Magica:"3",Mecha:"4",Ancia:"5",Stellar:"6",Mysteria:"7"},l:{Egg:1,Adult:2},k:{Origin:2,Genesis:1},a:{ForSale:1,ForRent:2,Renting:3,Available:4,InGameChapter1:5},c:2,d:{selectClass:"",sortPower:"minePower",sortOrder:"asc"},e:7955107200,g:{ExploreMission:1,AssitMission:2,CanAssitMission:3},f:{Explore:"Explore",Assit:"Assit",Fortify1:3,Fortify2:4,Finish:100},i:{Explore:3,Assit:3,Fortify1:1,Fortify2:1,Finish:100},h:{Explore:"Explore",Assit:"Assit"},j:{Explore:"Explore",Supported1:"Supported1",Fortify1:"Fortify1",Supported2:"Supported2"}}},1465:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.gameInfo=exports.ABI_PORTAL=exports.ABI_MARKETPLACE=exports.ABI_RENTAL=exports.ABI_IDLE=void 0,exports.ABI_IDLE=JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":true,"internalType":"uint256","name":"fragments","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"farmerReward1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"farmerReward2","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"helperReward1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"helperReward2","type":"uint256"}],"name":"AdventureFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"index","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rewardLevel","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureFortified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"farmer","type":"address"},{"indexed":true,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"indexed":false,"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"indexed":false,"internalType":"uint8[3]","name":"rewardLevels","type":"uint8[3]"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"helper","type":"address"},{"indexed":false,"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"indexed":false,"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"indexed":false,"internalType":"uint8[3]","name":"rewardLevels","type":"uint8[3]"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureSupported1","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"index","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rewardLevel","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureSupported2","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"FragmentConfigsChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"adventureDuration","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"turnDuration","type":"uint256"}],"name":"GameDurationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint8","name":"env","type":"uint8"}],"name":"GameEnvChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"NoFragments","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"porianNFT","type":"address"},{"indexed":true,"internalType":"address","name":"porianPower","type":"address"},{"indexed":true,"internalType":"address","name":"rentalCentre","type":"address"}],"name":"PorianContractAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"expiredAt","type":"uint256"}],"name":"PorianDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"}],"name":"PorianWithdrawed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rentalFee","type":"uint256"},{"indexed":true,"internalType":"address","name":"reservePool","type":"address"}],"name":"RentalConfigsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"rigyToken","type":"address"},{"indexed":false,"internalType":"address","name":"rikenToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"rigyReward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rikenReward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"winRatio","type":"uint256"}],"name":"RewardConfigsChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rewardLevel","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"rewardRatio","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amountCell","type":"uint256"}],"name":"RewardLevelChanged","type":"event"},{"inputs":[],"name":"adventureDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"blockedTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decreasedTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"env","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mechaDiscount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mines","outputs":[{"internalType":"enum IdleGame.MiningState","name":"state","type":"uint8"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"farmer","type":"tuple"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"helper","type":"tuple"},{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mission2Riken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianNFT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianPower","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"portalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"portalInfos","outputs":[{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint256","name":"supplied","type":"uint256"},{"internalType":"uint256","name":"locked","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rentalCentre","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rentalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rentalPriceOf","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint128","name":"price","type":"uint128"},{"internalType":"uint128","name":"endTime","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"reservePool","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rewardLevels","outputs":[{"internalType":"uint256","name":"rewardRatio","type":"uint256"},{"internalType":"uint256","name":"amountCell","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rigyReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rigyToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rikenReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rikenToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalFragments","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"turnDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_adventureDuration","type":"uint256"},{"internalType":"uint256","name":"_turnDuration","type":"uint256"}],"name":"setGameDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"setGameEnv","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[4]","name":"rewardRatios","type":"uint256[4]"},{"internalType":"uint256[4]","name":"amountCells","type":"uint256[4]"}],"name":"setRewardLevels","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rigyToken","type":"address"},{"internalType":"address","name":"_rikenToken","type":"address"},{"internalType":"uint256","name":"_rigyReward","type":"uint256"},{"internalType":"uint256","name":"_rikenReward","type":"uint256"},{"internalType":"uint256","name":"_winRatio","type":"uint256"}],"name":"setRewardConfigs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_porianNFT","type":"address"},{"internalType":"address","name":"_porianPower","type":"address"},{"internalType":"address","name":"_rentalCentre","type":"address"}],"name":"setPorianContractAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fragmentRate","type":"uint256"},{"internalType":"uint256","name":"_fragmentAmount","type":"uint256"},{"internalType":"address","name":"_fragmentToken","type":"address"}],"name":"setFragmentConfigs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"porian","type":"uint256"}],"name":"getOwnerNowOf","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"porian","type":"uint256"}],"name":"notExisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"expiredAt","type":"uint256"},{"internalType":"bytes12","name":"flags","type":"bytes12"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onAuthorized","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"porians","type":"uint256[]"}],"name":"withdrawPorians","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"porianID","type":"uint256"},{"internalType":"uint256","name":"atTime","type":"uint256"}],"name":"getOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"}],"name":"isMecha","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"internalType":"bool","name":"notPortal","type":"bool"}],"name":"startAdventure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"internalType":"bool","name":"notPortal","type":"bool"}],"name":"support1","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256","name":"porian","type":"uint256"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"fortify","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256","name":"porian","type":"uint256"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"support2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"}],"name":"finish","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"},{"internalType":"uint256","name":"mission","type":"uint256"}],"name":"getPortalInfoOf","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"bytes12","name":"_selectedCells","type":"bytes12"}],"name":"_calculateNormalReward","outputs":[{"internalType":"uint256","name":"reward1","type":"uint256"},{"internalType":"uint256","name":"reward2","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"enum IdleGame.MiningState","name":"state","type":"uint8"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"farmer","type":"tuple"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"helper","type":"tuple"},{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"internalType":"struct IdleGame.MineInfo","name":"m","type":"tuple"},{"internalType":"uint8","name":"_env","type":"uint8"},{"internalType":"uint256","name":"fRigyReward","type":"uint256"},{"internalType":"uint256","name":"fRikenReward","type":"uint256"},{"internalType":"uint256","name":"hRigyReward","type":"uint256"},{"internalType":"uint256","name":"hRikenReward","type":"uint256"}],"name":"_calculateBigReward","outputs":[{"internalType":"address","name":"winner","type":"address"},{"internalType":"uint256","name":"fragments","type":"uint256"},{"internalType":"uint256","name":"fRigyRewardNew","type":"uint256"},{"internalType":"uint256","name":"fRikenRewardNew","type":"uint256"},{"internalType":"uint256","name":"hRigyRewardNew","type":"uint256"},{"internalType":"uint256","name":"hRikenRewardNew","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"atkPowerOf","outputs":[{"internalType":"uint256","name":"atkPower","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"defPowerOf","outputs":[{"internalType":"uint256","name":"defPower","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"randomRewardLevel","outputs":[{"internalType":"uint8","name":"rewardLevel","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"uint8","name":"level","type":"uint8"},{"internalType":"uint8","name":"joined","type":"uint8"}],"name":"setRewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"getRewardInfo","outputs":[{"internalType":"uint8","name":"level","type":"uint8"},{"internalType":"uint8","name":"joined","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"setEnv2RewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"getEnvOf","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"setStartTime2RewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"getStartTimeOfRewardMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"level","type":"uint256"},{"internalType":"uint256","name":"mode","type":"uint256"}],"name":"getRewardOf","outputs":[{"internalType":"uint256","name":"_rigyReward","type":"uint256"},{"internalType":"uint256","name":"_rikenReward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"ep","type":"uint256"},{"internalType":"uint256","name":"ap","type":"uint256"}],"name":"getESB","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"rikenAmounts","type":"uint256[]"},{"internalType":"uint256","name":"_mechaDiscount","type":"uint256"},{"internalType":"uint256","name":"capacityRiken","type":"uint256"},{"internalType":"uint128","name":"missionLimit","type":"uint128"},{"internalType":"uint256","name":"_decreasedTime","type":"uint256"}],"name":"setRikenPortalConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"}],"name":"portalInfoOf","outputs":[{"internalType":"uint256","name":"suppliedRiken","type":"uint256"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"},{"internalType":"uint256","name":"availableRiken","type":"uint256"},{"internalType":"uint256","name":"capacityRiken","type":"uint256"},{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint128","name":"capacityMissions","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missions","type":"uint256"},{"internalType":"bool","name":"_isMecha","type":"bool"}],"name":"getRikenAmount","outputs":[{"internalType":"uint256","name":"rikenAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"name":"sqrt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"missionOfPori","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]'),exports.ABI_RENTAL=JSON.parse('[{"inputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"yes","type":"bool"}],"name":"AutoRenewSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPricePerSec","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"ItemInfoChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"pricePerSec","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"ItemListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"renter","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"pricePerSec","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expiredAt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"}],"name":"ItemRented","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"ItemUnlisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MarketFeeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldNFTToken","type":"address"},{"indexed":false,"internalType":"address","name":"newNFTToken","type":"address"}],"name":"NFTTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldPaymentToken","type":"address"},{"indexed":false,"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"PaymentTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPricePerSec","type":"uint256"}],"name":"PricePerSecChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"RentalTimeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldReservePool","type":"address"},{"indexed":false,"internalType":"address","name":"newReservePool","type":"address"}],"name":"ReservePoolChanged","type":"event"},{"inputs":[],"name":"A_HUNDRED_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"pricePerSec","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"listItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"newPricePerSec","type":"uint256"}],"name":"changePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"newPricePerSec","type":"uint256"},{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"changeItemInfo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"unlistItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"uint256","name":"rentalTime","type":"uint256"}],"name":"rentItem","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"},{"internalType":"bool","name":"yes","type":"bool"}],"name":"setAutoRenew","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"minRentalTime","type":"uint256"},{"internalType":"uint256","name":"maxRentalTime","type":"uint256"}],"name":"setRentalTime","outputs":[],"stateMutability":"nonpayable","type":"function"}]'),exports.ABI_MARKETPLACE=JSON.parse('[{"inputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"}],"name":"ItemSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemUnlisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MarketFeeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldNFTToken","type":"address"},{"indexed":true,"internalType":"address","name":"newNFTToken","type":"address"}],"name":"NFTTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldPaymentToken","type":"address"},{"indexed":true,"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"PaymentTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"PriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldReservePool","type":"address"},{"indexed":true,"internalType":"address","name":"newReservePool","type":"address"}],"name":"ReservePoolChanged","type":"event"},{"inputs":[],"name":"A_HUNDRED_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"changeFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"changePaymentToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newNFTToken","type":"address"}],"name":"changeNFTToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newReservePool","type":"address"}],"name":"changeReservePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"listItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"},{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"changePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"unlistItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"buyItem","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"getItem","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"enum Marketplace.ItemState","name":"state","type":"uint8"},{"internalType":"address","name":"buyer","type":"address"}],"internalType":"struct Marketplace.MarketItem","name":"item","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalItems","outputs":[{"internalType":"uint256","name":"totalItems","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getConfigs","outputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"}]'),exports.ABI_PORTAL=JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RikenDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RikenWithdrawn","type":"event"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"addressOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missionId","type":"uint256"},{"internalType":"address","name":"explorer","type":"address"},{"internalType":"address","name":"assistant","type":"address"}],"name":"closePortal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"configuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"configure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"},{"internalType":"uint256","name":"missionId","type":"uint256"}],"name":"getPortalInfoOf","outputs":[{"internalType":"bool","name":"expressMode","type":"bool"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"missionCount","type":"uint256"},{"internalType":"bool","name":"discounted","type":"bool"}],"name":"getRikenAmount","outputs":[{"internalType":"uint256","name":"rikenAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"}],"name":"hasMecha","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"missionRiken","type":"uint256[]"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"porianId","type":"uint256"}],"name":"isMecha","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mission2Riken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"},{"internalType":"uint256","name":"missionId","type":"uint256"}],"name":"missionInfo","outputs":[{"internalType":"bool","name":"expressMode","type":"bool"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"bool","name":"expressMode","type":"bool"},{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"}],"name":"openPortal","outputs":[{"internalType":"uint256","name":"duration","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianNFT","outputs":[{"internalType":"contract Porian","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"portalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"player","type":"address"}],"name":"portalInfoOf","outputs":[{"internalType":"uint256","name":"suppliedRiken","type":"uint256"},{"internalType":"uint256","name":"lockedRiken","type":"uint256"},{"internalType":"uint256","name":"availableRiken","type":"uint256"},{"internalType":"uint256","name":"capacityRiken","type":"uint256"},{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint128","name":"capacityMissions","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"portalInfos","outputs":[{"internalType":"uint128","name":"missions","type":"uint128"},{"internalType":"uint128","name":"fastMissions","type":"uint128"},{"internalType":"uint256","name":"supplied","type":"uint256"},{"internalType":"uint256","name":"locked","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"riken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"missionRiken","type":"uint256[]"}],"name":"setMissionRiken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawRiken","outputs":[],"stateMutability":"nonpayable","type":"function"}]'),exports.gameInfo={m:{app:{name:'"PoriAdventureGame";',version:"'1.0.0';",apiUrl:"https://api.poriverse.io",apiKey:"3537a676-6ad9-462a-ae31-3cc2dd6f8c1d",apiSecretKey:"55cdeacd6ef64abc90097ecc5def8ab1044d968892714cff833a11357c1f4168",locale:"en",fallbackLocale:"en",urlAdventure:"https://adventure.poriverse.io",urlMarketplace:"https://marketplace.poriverse.io",linkPori2D:"https://photos.poriverse.io",linkPori3D:"https://3d-model.poriverse.io/index.html",token:{nativeSymbol:"RIKEN",nativeAddress:"0xFbBd93fC3BE8B048c007666AF4846e4A36BACC95",nativeDecimal:"18",nativeId:"tether",inGameSymbol:"RIGY",inGameAddress:"0x9F994e2783b44C83204377589854A17c6b0c226d",inGameDecimal:"18",inGameId:"siacoin",fragmentSymbol:"FRAGMENT",fragmentAddress:"0xB640AdA89445ce74C6554bf27CD1aecE9CE998e4",fragmentDecimal:"0"},scCreatedBlock:{idle:27503296},contractAddress:{PoriNFTBreedable:"0x81d5a77b1a070bec11280af89849ac5d74bb06cf",poriBreedingRule:"0x34041860276ebafe36067974acf52e232dc8452f",marketplaceAddress:"0xb73b8a250b317d52ed88e9b510919ecfae5923a0",rentalAddress:"0xEa5ee287DE00112b427f96eCe8d2725EA2BfEf41",idleGameAddress:"0xF8D301Db0bcbEe19B91629402AEF9FE569bE0221",multicallAddress:"0x11ce4B23bD875D7F5C6a31084f55fDe1e9A87507"},rpcMetamask:{chainId:"137"}}},n:{chainId:"0x89",chainName:"Polygon Mainnet",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://rpc-mainnet.maticvigil.com/v1/ca075eb5895f0ea35c4c45a026ad062cd5153437"],blockExplorerUrls:["https://polygonscan.com/"]},b:{Terra:"1",Aqua:"2",Magica:"3",Mecha:"4",Ancia:"5",Stellar:"6",Mysteria:"7"},l:{Egg:1,Adult:2},k:{Origin:2,Genesis:1},a:{ForSale:1,ForRent:2,Renting:3,Available:4,InGameChapter1:5},c:2,d:{selectClass:"",sortPower:"minePower",sortOrder:"asc"},e:7955107200,g:{ExploreMission:1,AssitMission:2,CanAssitMission:3},f:{Explore:"Explore",Assit:"Assit",Fortify1:3,Fortify2:4,Finish:100},i:{Explore:3,Assit:3,Fortify1:1,Fortify2:1,Finish:100},h:{Explore:"Explore",Assit:"Assit"},j:{Explore:"Explore",Supported1:"Supported1",Fortify1:"Fortify1",Supported2:"Supported2"}}},1601:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.gameInfo=exports.ABI_IDLE=void 0,exports.ABI_IDLE=JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":true,"internalType":"uint256","name":"fragments","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"farmerReward1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"farmerReward2","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"helperReward1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"helperReward2","type":"uint256"}],"name":"AdventureFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"index","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rewardLevel","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureFortified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"farmer","type":"address"},{"indexed":true,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"indexed":false,"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"indexed":false,"internalType":"uint8[3]","name":"rewardLevels","type":"uint8[3]"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"address","name":"helper","type":"address"},{"indexed":false,"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"indexed":false,"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"indexed":false,"internalType":"uint8[3]","name":"rewardLevels","type":"uint8[3]"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureSupported1","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"mineId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint8","name":"index","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"rewardLevel","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"blockedTime","type":"uint256"}],"name":"AdventureSupported2","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"FragmentConfigsChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"adventureDuration","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"turnDuration","type":"uint256"}],"name":"GameDurationChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint8","name":"env","type":"uint8"}],"name":"GameEnvChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"NoFragments","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"porianNFT","type":"address"},{"indexed":true,"internalType":"address","name":"porianPower","type":"address"},{"indexed":true,"internalType":"address","name":"rentalCentre","type":"address"}],"name":"PorianContractAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"expiredAt","type":"uint256"}],"name":"PorianDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"porian","type":"uint256"}],"name":"PorianWithdrawed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rentalFee","type":"uint256"},{"indexed":true,"internalType":"address","name":"reservePool","type":"address"}],"name":"RentalConfigsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"rigyToken","type":"address"},{"indexed":false,"internalType":"address","name":"rikenToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"rigyReward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"rikenReward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"winRatio","type":"uint256"}],"name":"RewardConfigsChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"rewardLevel","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"rewardRatio","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"amountCell","type":"uint256"}],"name":"RewardLevelChanged","type":"event"},{"inputs":[],"name":"adventureDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"blockedTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"env","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fragmentToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"mines","outputs":[{"internalType":"enum IdleGame.MiningState","name":"state","type":"uint8"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"farmer","type":"tuple"},{"components":[{"internalType":"address","name":"player","type":"address"},{"internalType":"bytes12","name":"selectedCells","type":"bytes12"},{"internalType":"uint128","name":"porianId1","type":"uint128"},{"internalType":"uint128","name":"porianId2","type":"uint128"}],"internalType":"struct IdleGame.PlayerInfo","name":"helper","type":"tuple"},{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianNFT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"porianPower","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rentalCentre","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rentalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rentalPriceOf","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint128","name":"price","type":"uint128"},{"internalType":"uint128","name":"endTime","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"reservePool","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"rewardLevels","outputs":[{"internalType":"uint256","name":"rewardRatio","type":"uint256"},{"internalType":"uint256","name":"amountCell","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rigyReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rigyToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rikenReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rikenToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"turnDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"winRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_adventureDuration","type":"uint256"},{"internalType":"uint256","name":"_turnDuration","type":"uint256"}],"name":"setGameDuration","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"setGameEnv","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[4]","name":"rewardRatios","type":"uint256[4]"},{"internalType":"uint256[4]","name":"amountCells","type":"uint256[4]"}],"name":"setRewardLevels","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rigyToken","type":"address"},{"internalType":"address","name":"_rikenToken","type":"address"},{"internalType":"uint256","name":"_rigyReward","type":"uint256"},{"internalType":"uint256","name":"_rikenReward","type":"uint256"},{"internalType":"uint256","name":"_winRatio","type":"uint256"}],"name":"setRewardConfigs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_porianNFT","type":"address"},{"internalType":"address","name":"_porianPower","type":"address"},{"internalType":"address","name":"_rentalCentre","type":"address"}],"name":"setPorianContractAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_fragmentRate","type":"uint256"},{"internalType":"uint256","name":"_fragmentAmount","type":"uint256"},{"internalType":"address","name":"_fragmentToken","type":"address"}],"name":"setFragmentConfigs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"expiredAt","type":"uint256"},{"internalType":"bytes12","name":"flags","type":"bytes12"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onAuthorized","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"porians","type":"uint256[]"}],"name":"withdrawPorians","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"porianID","type":"uint256"},{"internalType":"uint256","name":"atTime","type":"uint256"}],"name":"getOwnerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"internalType":"bool","name":"notPortal","type":"bool"}],"name":"startAdventure","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256[3]","name":"porians","type":"uint256[3]"},{"internalType":"uint8[3]","name":"indexes","type":"uint8[3]"},{"internalType":"bool","name":"notPortal","type":"bool"}],"name":"support1","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256","name":"porian","type":"uint256"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"fortify","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"},{"internalType":"uint256","name":"porian","type":"uint256"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"support2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"mineId","type":"uint256"}],"name":"finish","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"bytes12","name":"_selectedCells","type":"bytes12"}],"name":"_calculateNormalReward","outputs":[{"internalType":"uint256","name":"reward1","type":"uint256"},{"internalType":"uint256","name":"reward2","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"fPorian1","type":"uint256"},{"internalType":"uint256","name":"fPorian2","type":"uint256"},{"internalType":"uint256","name":"hPorian1","type":"uint256"},{"internalType":"uint256","name":"hPorian2","type":"uint256"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"_calculateBigReward","outputs":[{"internalType":"bool","name":"isFarmer","type":"bool"},{"internalType":"uint256","name":"fragments","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"atkPowerOf","outputs":[{"internalType":"uint256","name":"atkPower","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"defPowerOf","outputs":[{"internalType":"uint256","name":"defPower","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"randomRewardLevel","outputs":[{"internalType":"uint8","name":"rewardLevel","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"index","type":"uint8"},{"internalType":"uint8","name":"level","type":"uint8"},{"internalType":"uint8","name":"joined","type":"uint8"}],"name":"setRewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"index","type":"uint8"}],"name":"getRewardInfo","outputs":[{"internalType":"uint8","name":"level","type":"uint8"},{"internalType":"uint8","name":"joined","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint8","name":"_env","type":"uint8"}],"name":"setEnv2RewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"getEnvOf","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"},{"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"setStartTime2RewardMap","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"rewardMap","type":"bytes32"}],"name":"getStartTimeOfRewardMap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"level","type":"uint256"},{"internalType":"uint256","name":"mode","type":"uint256"}],"name":"getRewardOf","outputs":[{"internalType":"uint256","name":"_rigyReward","type":"uint256"},{"internalType":"uint256","name":"_rikenReward","type":"uint256"}],"stateMutability":"view","type":"function"}]'),JSON.parse('[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]'),JSON.parse('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]'),JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}]'),JSON.parse('[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"string","name":"baseTokenURI","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"delegator","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"expiredAt","type":"uint256"},{"indexed":false,"internalType":"bytes12","name":"flags","type":"bytes12"}],"name":"Authorized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"eggId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"fatherId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"motherId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"birthdate","type":"uint256"}],"name":"Breeded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldBreedingRule","type":"address"},{"indexed":true,"internalType":"address","name":"newBreedingRule","type":"address"}],"name":"BreedingRuleAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"eggId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"gene","type":"uint256"}],"name":"EggHatched","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"porianId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"extraGene","type":"uint256"}],"name":"ExtraGeneActive","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldGeneFactory","type":"address"},{"indexed":true,"internalType":"address","name":"newGeneFactory","type":"address"}],"name":"GeneFactoryAddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"CAN_AUTHORIZE_FLAG","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MUST_BE_EXPIRED_FLAG","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"authorityOf","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes12","name":"","type":"bytes12"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getFlagAt","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"expiredAt","type":"uint256"},{"internalType":"bytes12","name":"flags","type":"bytes12"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeAuthorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeAuthorize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"expiredAts","type":"uint256[]"},{"internalType":"bytes12[]","name":"flags","type":"bytes12[]"},{"internalType":"bytes[]","name":"_datas","type":"bytes[]"}],"name":"safeAuthorizeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"bytes[]","name":"_datas","type":"bytes[]"}],"name":"safeAuthorizeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bool","name":"value","type":"bool"}],"name":"setFlagAt","outputs":[{"internalType":"bytes12","name":"","type":"bytes12"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"string","name":"baseTokenURI","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"breedingRule","type":"address"}],"name":"setBreedingRuleAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"geneFactory","type":"address"}],"name":"setGeneFactoryAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"breedingRuleAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"geneFactoryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"gene","type":"uint256"}],"name":"mintPori","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"genes","type":"uint256[]"}],"name":"mintPoriBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dadId","type":"uint256"},{"internalType":"uint256","name":"momId","type":"uint256"}],"name":"breed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"eggId","type":"uint256"}],"name":"hatchEgg","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"activeExtraGene","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getPori","outputs":[{"internalType":"uint256","name":"gene","type":"uint256"},{"internalType":"uint256","name":"extraGene","type":"uint256"},{"internalType":"uint256","name":"fatherId","type":"uint256"},{"internalType":"uint256","name":"motherId","type":"uint256"},{"internalType":"uint128","name":"birthdate","type":"uint128"},{"internalType":"uint128","name":"breedingCount","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"level","type":"uint256"}],"name":"getFamily","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"}]'),JSON.parse('[{"constant":true,"inputs":[],"name":"getCurrentBlockTimestamp","outputs":[{"name":"timestamp","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"target","type":"address"},{"name":"callData","type":"bytes"}],"name":"calls","type":"tuple[]"}],"name":"aggregate","outputs":[{"name":"blockNumber","type":"uint256"},{"name":"returnData","type":"bytes[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getLastBlockHash","outputs":[{"name":"blockHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getEthBalance","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCurrentBlockDifficulty","outputs":[{"name":"difficulty","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCurrentBlockGasLimit","outputs":[{"name":"gaslimit","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCurrentBlockCoinbase","outputs":[{"name":"coinbase","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"blockNumber","type":"uint256"}],"name":"getBlockHash","outputs":[{"name":"blockHash","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"}]'),JSON.parse('[{"inputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemListed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"address","name":"buyer","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"}],"name":"ItemSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"price","type":"uint256"}],"name":"ItemUnlisted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"MarketFeeChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldNFTToken","type":"address"},{"indexed":true,"internalType":"address","name":"newNFTToken","type":"address"}],"name":"NFTTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldPaymentToken","type":"address"},{"indexed":true,"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"PaymentTokenChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"PriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldReservePool","type":"address"},{"indexed":true,"internalType":"address","name":"newReservePool","type":"address"}],"name":"ReservePoolChanged","type":"event"},{"inputs":[],"name":"A_HUNDRED_PERCENT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"changeFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newPaymentToken","type":"address"}],"name":"changePaymentToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newNFTToken","type":"address"}],"name":"changeNFTToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newReservePool","type":"address"}],"name":"changeReservePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"}],"name":"listItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"},{"internalType":"uint256","name":"newPrice","type":"uint256"}],"name":"changePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"unlistItem","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"buyItem","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"itemId","type":"uint256"}],"name":"getItem","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"enum Marketplace.ItemState","name":"state","type":"uint8"},{"internalType":"address","name":"buyer","type":"address"}],"internalType":"struct Marketplace.MarketItem","name":"item","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalItems","outputs":[{"internalType":"uint256","name":"totalItems","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getConfigs","outputs":[{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"address","name":"nftToken","type":"address"},{"internalType":"address","name":"reservePool","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"view","type":"function"}]'),JSON.parse('[{"inputs":[{"internalType":"uint256","name":"hatchingTime","type":"uint256"},{"internalType":"uint256","name":"maxBreedingCount","type":"uint256"},{"internalType":"uint256","name":"relationshipLevel","type":"uint256"},{"internalType":"address","name":"feeToken1","type":"address"},{"internalType":"address","name":"feeToken2","type":"address"},{"internalType":"address","name":"reservePool1","type":"address"},{"internalType":"address","name":"reservePool2","type":"address"},{"internalType":"uint256[]","name":"fee1ByBreedingCount","type":"uint256[]"},{"internalType":"uint256[]","name":"fee2ByBreedingCount","type":"uint256[]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"maxBreedingCount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"relationshipLevel","type":"uint256"}],"name":"BreedingConfigChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"breedingCount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"Fee1ByBreedingCount","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"breedingCount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"Fee2ByBreedingCount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldFeeToken","type":"address"},{"indexed":true,"internalType":"address","name":"newFeeToken","type":"address"}],"name":"FeeToken1Changed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldFeeToken","type":"address"},{"indexed":true,"internalType":"address","name":"newFeeToken","type":"address"}],"name":"FeeToken2Changed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"oldHatchingTime","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"newHatchingTime","type":"uint256"}],"name":"HatchingConfigChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldPoriNFT","type":"address"},{"indexed":true,"internalType":"address","name":"newPoriNFT","type":"address"}],"name":"PoriNFTChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldReservePool","type":"address"},{"indexed":true,"internalType":"address","name":"newReservePool","type":"address"}],"name":"ReservePool1Changed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldReservePool","type":"address"},{"indexed":true,"internalType":"address","name":"newReservePool","type":"address"}],"name":"ReservePool2Changed","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getConfigs","outputs":[{"internalType":"uint256","name":"maxBreedingCount","type":"uint256"},{"internalType":"uint256","name":"relationshipLevel","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getConfigAddresses","outputs":[{"internalType":"address","name":"poriNFT","type":"address"},{"internalType":"address","name":"feeToken1","type":"address"},{"internalType":"address","name":"feeToken2","type":"address"},{"internalType":"address","name":"reservePool1","type":"address"},{"internalType":"address","name":"reservePool2","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint128","name":"breedingCount","type":"uint128"}],"name":"getFeeOf","outputs":[{"internalType":"uint256","name":"fee1","type":"uint256"},{"internalType":"uint256","name":"fee2","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getHatchingConfig","outputs":[{"internalType":"uint256","name":"hatchingTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"hatchingTime","type":"uint256"}],"name":"setHatchingConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"maxBreedingCount","type":"uint256"},{"internalType":"uint256","name":"relationshipLevel","type":"uint256"}],"name":"setBreedingConfigs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"fee1ByBreedingCount","type":"uint256[]"}],"name":"setFee1ByBreedingCount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"fee2ByBreedingCount","type":"uint256[]"}],"name":"setFee2ByBreedingCount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"nft","type":"address"}],"name":"setPoriNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"feeToken1","type":"address"}],"name":"setFeeToken1","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"feeToken2","type":"address"}],"name":"setFeeToken2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newReservePool1","type":"address"}],"name":"setReservePool1","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newReservePool2","type":"address"}],"name":"setReservePool2","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"dadId","type":"uint256"},{"internalType":"uint256","name":"dadGene","type":"uint256"},{"internalType":"uint128","name":"dadBreedingCount","type":"uint128"},{"internalType":"uint256","name":"momId","type":"uint256"},{"internalType":"uint256","name":"momGene","type":"uint256"},{"internalType":"uint128","name":"momBreedingCount","type":"uint128"}],"name":"breed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"gene","type":"uint256"},{"internalType":"uint256[2]","name":"parents","type":"uint256[2]"},{"internalType":"uint128","name":"birthdate","type":"uint128"},{"internalType":"uint128","name":"breedingCount","type":"uint128"}],"internalType":"struct PoriNFTBreedable.PoriInfo","name":"pori","type":"tuple"}],"name":"validateHatchingRule","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]'),exports.gameInfo={m:{app:{name:'"PoriIdleGame";',version:"'1.0.0';",apiUrl:"https://stage2-po-api.vinaweb.app",apiKey:"3537a676-6ad9-462a-ae31-3cc2dd6f8c1d",apiSecretKey:"55cdeacd6ef64abc90097ecc5def8ab1044d968892714cff833a11357c1f4168",locale:"en",fallbackLocale:"en",urlAdventure:"https://stag-adventure.poriverse.io",urlMarketplace:"https://stag-marketplace.poriverse.io",linkPori2D:"https://stag-porian-photo.vinaweb.app",linkPori3D:"https://po-model.vinaweb.app/index.html",token:{nativeSymbol:"RIKEN",nativeAddress:"0xc78cd7A12D73B3021CDB3Bffb8230065118D3b47",nativeDecimal:"18",nativeId:"crabada",inGameSymbol:"RIGY",inGameAddress:"0xB9C88958806a187a6626A5B22089E3d3909415aa",inGameDecimal:"18",inGameId:"treasure-under-sea",fragmentSymbol:"FRAGMENT",fragmentAddress:"0x37a0318c36D38724fD3b193BF2D6bAD3498A67e3",fragmentDecimal:"18"},scCreatedBlock:{idle:25777543},contractAddress:{PoriNFTBreedable:"0xe958F64556f7293D882E7a3E7330546F9Ea75182",poriBreedingRule:"0x066aB3B4817514a86cf91433dfF8C5bC2c666FDf",marketplaceAddress:"0x4831013ac926366e856140548692e4e2B4799Bfa",rentalAddress:"0xEa5ee287DE00112b427f96eCe8d2725EA2BfEf41",idleGameAddress:"0x70d66d12c424Db41bf4E501A3FBbF5D4a779E66b",multicallAddress:"0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc"},rpcMetamask:{chainId:"80001"}}},n:{chainId:"0x13881",chainName:"Mumbai-Testnet",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://rpc-mumbai.vinaweb.app"],blockExplorerUrls:["https://mumbai.polygonscan.com/"]},b:{Terra:"1",Aqua:"2",Magica:"3",Mecha:"4",Ancia:"5",Stellar:"6",Mysteria:"7"},l:{Egg:1,Adult:2},k:{Origin:2,Genesis:1},a:{ForSale:1,ForRent:2,Renting:3,Available:4,InGameChapter1:5},c:{selectClass:"",sortPower:"minePower",sortOrder:"asc"},d:7955107200,g:{ExploreMission:1,AssitMission:2,CanAssitMission:3},f:{Explore:"Explore",Assit:"Assit",Fortify1:3,Fortify2:4,Finish:100},i:{Explore:3,Assit:3,Fortify1:1,Fortify2:1,Finish:100},h:{Explore:"Explore",Assit:"Assit"},j:{Explore:"Explore",Supported1:"Supported1",Fortify1:"Fortify1",Supported2:"Supported2"},e:{Unknown:0,Started:1,Supported1:2,Fortified1:3,Supported2:4,Finished:5}}},2098:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Services=exports.SchedulerService=exports.SchedulerRepo=exports.ScheduleJobModel=exports.DataViewRepo=exports.DataViewModel=exports.PoriDataModel=exports.PoriRepo=exports.PlayerDataModel=exports.PlayerRepo=exports.IdleGameSCEventRepo=exports.IdleGameSCMetadataRepo=exports.IdleGameSCEventDataModel=exports.IdleGameSCMetadataDataModel=exports.openRepo=void 0;const realm_1=__webpack_require__(752).__importDefault(__webpack_require__(460)),schema_1=__webpack_require__(7836),schema_2=__webpack_require__(7836);Object.defineProperty(exports,"IdleGameSCMetadataRepo",{enumerable:!0,get:function(){return schema_2.IdleGameSCMetadataRepo}}),Object.defineProperty(exports,"IdleGameSCMetadataDataModel",{enumerable:!0,get:function(){return schema_2.IdleGameSCMetadataDataModel}}),Object.defineProperty(exports,"IdleGameSCEventRepo",{enumerable:!0,get:function(){return schema_2.IdleGameSCEventRepo}}),Object.defineProperty(exports,"IdleGameSCEventDataModel",{enumerable:!0,get:function(){return schema_2.IdleGameSCEventDataModel}}),Object.defineProperty(exports,"PlayerRepo",{enumerable:!0,get:function(){return schema_2.PlayerRepo}}),Object.defineProperty(exports,"PlayerDataModel",{enumerable:!0,get:function(){return schema_2.PlayerDataModel}}),Object.defineProperty(exports,"PoriRepo",{enumerable:!0,get:function(){return schema_2.PoriRepo}}),Object.defineProperty(exports,"PoriDataModel",{enumerable:!0,get:function(){return schema_2.PoriDataModel}}),Object.defineProperty(exports,"DataViewModel",{enumerable:!0,get:function(){return schema_2.DataViewModel}}),Object.defineProperty(exports,"DataViewRepo",{enumerable:!0,get:function(){return schema_2.DataViewRepo}});const scheduler_1=__webpack_require__(4326);Object.defineProperty(exports,"ScheduleJobModel",{enumerable:!0,get:function(){return scheduler_1.ScheduleJobModel}}),Object.defineProperty(exports,"SchedulerRepo",{enumerable:!0,get:function(){return scheduler_1.SchedulerRepo}}),Object.defineProperty(exports,"SchedulerService",{enumerable:!0,get:function(){return scheduler_1.SchedulerService}}),exports.openRepo=async function(opt){var _a;const schemas=null!==(_a=opt.schema)&&void 0!==_a?_a:[];return await realm_1.default.open({...opt,schemaVersion:3,schema:[...schemas,...schema_1.Schemas,...scheduler_1.SchedulerServiceSchema],shouldCompactOnLaunch:()=>!0})};const Services={SchedulerService:scheduler_1.SchedulerService};exports.Services=Services},4993:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.CommonReamRepo=void 0;const realm_1=__webpack_require__(752).__importDefault(__webpack_require__(460));exports.CommonReamRepo=function(MODEL_NAME){return class Wrapper{static async findOne(realm,id){return realm.objectForPrimaryKey(MODEL_NAME,id)}static findOneSync(realm,id){return realm.objectForPrimaryKey(MODEL_NAME,id)}static async findAll(realm){return realm.objects(MODEL_NAME)}static create(realm,data){return realm.create(MODEL_NAME,{...data},realm_1.default.UpdateMode.Modified)}static getOrCreate(realm,id,defaultData){const res=realm.objectForPrimaryKey(MODEL_NAME,id);return res||Wrapper.create(realm,{...defaultData,_id:id})}static async createWithTx(realm,data){return new Promise(((resolve,reject)=>{try{realm.write((()=>{const res=realm.create(MODEL_NAME,{...data},realm_1.default.UpdateMode.Modified);resolve(res)}))}catch(error){reject(error)}}))}static async upsertWithTx(realm,id,val){return new Promise(((resolve,reject)=>{try{const res=realm.objectForPrimaryKey(MODEL_NAME,id);if(res){const mergedData={...res.toJSON(),...val};return Wrapper.createWithTx(realm,mergedData).then(resolve).catch(reject)}return Wrapper.createWithTx(realm,{...val,_id:id}).then(resolve).catch(reject)}catch(error){return reject(error)}}))}static async getOrCreateWithTx(realm,id,defaultData){return new Promise(((resolve,reject)=>{try{const res=realm.objectForPrimaryKey(MODEL_NAME,id);return res?resolve(res):Wrapper.createWithTx(realm,{...defaultData,_id:id}).then(resolve).catch(reject)}catch(error){return reject(error)}}))}static async tx(realm,handler){return new Promise(((resolve,reject)=>{realm.write((()=>{try{handler(),resolve()}catch(error){reject(error)}}))}))}static txSync(realm,handler){realm.write((()=>{handler()}))}}}},2462:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.DataViewRepo=exports.DataViewModel=exports.PoriRepo=exports.PoriDataModel=exports.PlayerRepo=exports.PlayerDataModel=void 0;const realm_1=__webpack_require__(752).__importDefault(__webpack_require__(460)),baseDataModel_1=__webpack_require__(4993);class PlayerDataModel extends realm_1.default.Object{constructor(_id,createdBlock,pories){super(),this._id=_id,this.createdBlock=createdBlock,this.pories=pories}static generate(_id,createdBlock){return{_id,createdBlock}}}exports.PlayerDataModel=PlayerDataModel,PlayerDataModel.NAME="Players",PlayerDataModel.schema={name:PlayerDataModel.NAME,primaryKey:"_id",properties:{_id:"string",createdBlock:"int",pories:"Pories[]"}},exports.PlayerRepo=(0,baseDataModel_1.CommonReamRepo)(PlayerDataModel.NAME);class PoriDataModel extends realm_1.default.Object{constructor(_id,isActive,type,name,dna,status,poriClass,legend,purity,birthDate,ownerAddress,stage,health,speed,physicalAttack,physicalDefend,critical,magicAttack,magicDefend,minePower,helpPower,createdAt,updatedAt,player){super(),this._id=_id,this.isActive=isActive,this.type=type,this.name=name,this.dna=dna,this.status=status,this.poriClass=poriClass,this.legend=legend,this.purity=purity,this.birthDate=birthDate,this.ownerAddress=ownerAddress,this.stage=stage,this.health=health,this.speed=speed,this.physicalAttack=physicalAttack,this.physicalDefend=physicalDefend,this.critical=critical,this.magicAttack=magicAttack,this.magicDefend=magicDefend,this.minePower=minePower,this.helpPower=helpPower,this.createdAt=createdAt,this.updatedAt=updatedAt,this.player=player}static generate(info){const{tokenId,type,name,dna,status,poriClass,legend,purity,birthDate,ownerAddress,stage,health,speed,physicalAttack,physicalDefend,critical,magicAttack,magicDefend,minePower,helpPower,createdAt,updatedAt}=info;return{_id:tokenId,isActive:!0,type,name,dna,status,poriClass,legend,purity,birthDate,ownerAddress,stage,health,speed,physicalAttack,physicalDefend,critical,magicAttack,magicDefend,minePower,helpPower,createdAt,updatedAt}}}exports.PoriDataModel=PoriDataModel,PoriDataModel.NAME="Pories",PoriDataModel.schema={name:PoriDataModel.NAME,primaryKey:"_id",properties:{_id:"int",isActive:"bool",type:"int?",name:"string?",dna:"string?",status:"int?",poriClass:"int?",legend:"int?",purity:"int?",birthDate:"string?",ownerAddress:"string?",stage:"int?",health:"int?",speed:"int?",physicalAttack:"int?",physicalDefend:"int?",critical:"int?",magicAttack:"int?",magicDefend:"int?",minePower:"int?",helpPower:"int?",createdAt:"string?",updatedAt:"string?",player:{type:"linkingObjects",objectType:PlayerDataModel.NAME,property:"pories"}}},exports.PoriRepo=(0,baseDataModel_1.CommonReamRepo)(PoriDataModel.NAME);class DataViewModel extends realm_1.default.Object{constructor(_id,cursor,_v,data){super(),this._id=_id,this.cursor=cursor,this._v=_v,this.data=data}static generate(_id,cursor,data,version="1"){return{_id,cursor,_v:version,data:JSON.stringify(data)}}}exports.DataViewModel=DataViewModel,DataViewModel.NAME="DataView",DataViewModel.schema={name:DataViewModel.NAME,primaryKey:"_id",properties:{_id:"string",cursor:"string",_v:"string",data:"string"}},exports.DataViewRepo=(0,baseDataModel_1.CommonReamRepo)(DataViewModel.NAME)},475:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.IdleGameSCMetadataRepo=exports.IdleGameSCMetadataDataModel=exports.IdleGameSCEventRepo=exports.IdleGameSCEventDataModel=void 0;const realm_1=__webpack_require__(752).__importDefault(__webpack_require__(460)),baseDataModel_1=__webpack_require__(4993),{ObjectID}=realm_1.default.BSON;class IdleGameSCEventDataModel extends realm_1.default.Object{constructor(_id=new ObjectID,type,txHash,blockNo,data){super(),this._id=_id,this.type=type,this.txHash=txHash,this.blockNo=blockNo,this.data=data}static generate({type,txHash,blockNo,data}){return{_id:new ObjectID,type,txHash,blockNo,data}}}exports.IdleGameSCEventDataModel=IdleGameSCEventDataModel,IdleGameSCEventDataModel.NAME="IdleGame.SCEvents",IdleGameSCEventDataModel.schema={name:IdleGameSCEventDataModel.NAME,primaryKey:"_id",properties:{_id:"objectId",type:"string",txHash:"string",blockNo:"int",data:"IdleGame.SCEvents.EventPayload"}},IdleGameSCEventDataModel.embededEventDataSchema={name:"IdleGame.SCEvents.EventPayload",embedded:!0,properties:{mineId:"int?",farmer:"string?",startTime:"int?",porians:{type:"list",objectType:"int",optional:!0},indexes:{type:"list",objectType:"int",optional:!0},winner:"string?",fragments:"int?",farmerReward1:"decimal128?",farmerReward2:"decimal128?",helperReward1:"decimal128?",helperReward2:"decimal128?",porian:"int?",index:"int?",rewardLevel:"int?",blockedTime:"int?",helper:"string?",rewardLevels:{type:"list",objectType:"int",optional:!0},from:"string?",expiredAt:"int?",to:"string?",adventureDuration:"int?",turnDuration:"int?"}},exports.IdleGameSCEventRepo=(0,baseDataModel_1.CommonReamRepo)(IdleGameSCEventDataModel.NAME);class IdleGameSCMetadataDataModel extends realm_1.default.Object{constructor(_id,createdBlock,updatedBlock,extras={}){super(),this._id=_id,this.createdBlock=createdBlock,this.updatedBlock=updatedBlock,this.extras=extras}}exports.IdleGameSCMetadataDataModel=IdleGameSCMetadataDataModel,IdleGameSCMetadataDataModel.NAME="IdleGame.Metadata",IdleGameSCMetadataDataModel.schema={name:IdleGameSCMetadataDataModel.NAME,primaryKey:"_id",properties:{_id:"string",createdBlock:"int",updatedBlock:"int",extras:"{}"}},exports.IdleGameSCMetadataRepo=(0,baseDataModel_1.CommonReamRepo)(IdleGameSCMetadataDataModel.NAME)},7836:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Schemas=void 0;const tslib_1=__webpack_require__(752),scInfo_schema_1=__webpack_require__(475),game_schema_1=__webpack_require__(2462);tslib_1.__exportStar(__webpack_require__(475),exports),tslib_1.__exportStar(__webpack_require__(2462),exports),exports.Schemas=[scInfo_schema_1.IdleGameSCEventDataModel.schema,scInfo_schema_1.IdleGameSCMetadataDataModel.schema,scInfo_schema_1.IdleGameSCEventDataModel.embededEventDataSchema,game_schema_1.PlayerDataModel.schema,game_schema_1.PoriDataModel.schema,game_schema_1.DataViewModel.schema]},4326:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.SchedulerService=exports.SchedulerServiceSchema=exports.SchedulerRepo=exports.ScheduleJobModel=void 0;const tslib_1=__webpack_require__(752),debug_1=tslib_1.__importDefault(__webpack_require__(6974)),realm_1=tslib_1.__importDefault(__webpack_require__(460)),baseDataModel_1=__webpack_require__(4993),{ObjectID}=realm_1.default.BSON,debugLog=(0,debug_1.default)("pori:services:scheduler");class ScheduleJobModel extends realm_1.default.Object{constructor(){super(...arguments),this._id="",this.type="",this.codeName="",this.params="",this.runAt=new Date,this.hasFinish=!1,this.result=""}static generate(codeName,params,runAt,_id=(new ObjectID).toHexString()){return{_id,type:"SCHEDULE",codeName,params,runAt,hasFinish:!1}}}exports.ScheduleJobModel=ScheduleJobModel,ScheduleJobModel.NAME="Schedulers",ScheduleJobModel.schema={name:ScheduleJobModel.NAME,primaryKey:"_id",properties:{_id:"string",hasFinish:"bool",type:"string",codeName:"string",params:"string?",runAt:"date?",result:"string?"}},exports.SchedulerRepo=(0,baseDataModel_1.CommonReamRepo)(ScheduleJobModel.NAME),exports.SchedulerServiceSchema=[ScheduleJobModel];exports.SchedulerService=class SchedulerService{constructor(){this.jobHandlers={},this.timerTickets={}}addHandler(name,func){this.jobHandlers[name]=func}async start(realm){await this.refreshAllJob(realm)}async stop(realm){for(const[k,v]of Object.entries(this.timerTickets))clearTimeout(v)}async getJobById(realm,jobId){const ins=await exports.SchedulerRepo.findOne(realm,jobId);if(ins)return ins}async deleteJob(realm,jobId){const ins=await exports.SchedulerRepo.findOne(realm,jobId);ins&&exports.SchedulerRepo.txSync(realm,(()=>{const ticketId=ins._id;delete this.timerTickets[ticketId],realm.delete(ins)}))}async scheduleJob(realm,{codeName,params,runAt,_id}){const ins=await exports.SchedulerRepo.createWithTx(realm,ScheduleJobModel.generate(codeName,params,runAt,_id));return await this.internalRegisterJob(realm,ins),ins._id}async refreshAllJob(realm){const availableJobs=await this.listPendingJob(realm);for(const iterator of availableJobs)await this.internalRegisterJob(realm,iterator)}async listPendingJob(realm){const now=new Date;return(await exports.SchedulerRepo.findAll(realm)).filtered("runAt >= $0 && hasFinish = false",now)}async internalRegisterJob(realm,iterator){const now=new Date,{_id,runAt,codeName}=iterator,ticketId=_id;this.timerTickets[ticketId]&&clearTimeout(this.timerTickets[ticketId]);const intervalMs=runAt.valueOf()-now.valueOf();this.timerTickets[_id]=setTimeout(this.execJob(realm,ticketId),intervalMs)}execJob(realm,jobId){return async()=>{debugLog(`[scheduler] job id run ${jobId}`);const ins=await exports.SchedulerRepo.findOne(realm,jobId);if(!ins)return;const codeName=ins.codeName,params=ins.params;debugLog(`[scheduler] job id run ${jobId}. codeName ${codeName}, params ${params}`);let result="";try{const func=this.jobHandlers[codeName];if(!func)return result=`[error] missing handler for codeName ${codeName}`,void debugLog(`[scheduler] job id run ${jobId}. missing handler for codeName ${codeName}`);result=await func(ins)}catch(error){result=`[error] ${error.message}`,console.error(`[scheduler] job id run ${jobId}. error ${error.message}`)}finally{delete this.timerTickets[jobId],exports.SchedulerRepo.txSync(realm,(()=>{ins.hasFinish=!0,ins.result=result}))}}}}},9095:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});const tslib_1=__webpack_require__(752);tslib_1.__exportStar(__webpack_require__(1864),exports),tslib_1.__exportStar(__webpack_require__(8751),exports),tslib_1.__exportStar(__webpack_require__(7899),exports),tslib_1.__exportStar(__webpack_require__(171),exports),tslib_1.__exportStar(__webpack_require__(6292),exports),tslib_1.__exportStar(__webpack_require__(1222),exports)},1864:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.axiosIns=void 0;const axiosIns=new(__webpack_require__(2167).Axios)({headers:{"User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36"}});exports.axiosIns=axiosIns},7899:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.decryptAes=exports.encryptAes=exports.generateAesIv=exports.generateAesKey=void 0;const crypto_1=__webpack_require__(752).__importDefault(__webpack_require__(6113)),algo="aes-256-cbc";exports.generateAesKey=function(pass){const salt=crypto_1.default.randomBytes(16);return{key:crypto_1.default.scryptSync(pass,salt,32),algo}},exports.generateAesIv=function(){return crypto_1.default.randomBytes(16)},exports.encryptAes=async function({key,iv,data}){return new Promise(((resolve,reject)=>{const cipher=crypto_1.default.createCipheriv(algo,key,iv);let encrypted="";cipher.on("readable",(()=>{let chunk;for(;null!==(chunk=cipher.read());)encrypted+=chunk.toString("hex")})),cipher.on("end",(()=>{resolve(encrypted)})),cipher.on("error",(err=>{reject(err)})),cipher.write(data),cipher.end()}))},exports.decryptAes=async function({key,iv,encrypted}){return new Promise(((resolve,reject)=>{const decipher=crypto_1.default.createDecipheriv(algo,key,iv);let decrypted=decipher.update(encrypted,"hex","utf8");decrypted+=decipher.final("utf8"),resolve(decrypted)}))}},171:(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Deferred=void 0;exports.Deferred=class Deferred{constructor(){this.promise=new Promise(((resolve,reject)=>{this.reject=reject,this.resolve=resolve}))}reset(){this.promise=new Promise(((resolve,reject)=>{this.reject=reject,this.resolve=resolve}))}}},6292:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.minIndexBy=exports.minIndex=exports.splitPackedHexBy32Bytes=exports.hexToBytes=exports.isHexStrict=exports.byte2number=exports.isArrayIncludeAll=exports.boolFromString=exports.doTaskWithRetry=exports.waitForMs=void 0;const lodash_1=__webpack_require__(6517);function isHexStrict(hex){return("string"==typeof hex||"number"==typeof hex)&&/^(-)?0x[0-9a-f]*$/i.test(hex)}exports.waitForMs=ms=>new Promise((r=>setTimeout(r,ms))),exports.doTaskWithRetry=async function(times,doTask,onRetry,delayMs){let it=times;for(;it>0;)try{return void await doTask()}catch(error){it--;if(!(it>0))throw error;onRetry&&onRetry(error,times-it),delayMs&&await(0,exports.waitForMs)(delayMs)}},exports.boolFromString=function(inp){return"1"===inp||"true"===inp},exports.isArrayIncludeAll=function(array,contain){for(const itm of contain)if(!array.includes(itm))return!1;return!0},exports.byte2number=function(bytes){return parseInt(Buffer.from(bytes).toString("hex"),16)},exports.isHexStrict=isHexStrict,exports.hexToBytes=function(hex){if(!isHexStrict(hex=hex.toString(16)))throw new Error('Given value "'+hex+'" is not a valid hex string.');hex=hex.replace(/^0x/i,"");const bytes=[];for(let c=0;c<hex.length;c+=2)bytes.push(parseInt(hex.slice(c,c+2),16));return bytes},exports.splitPackedHexBy32Bytes=function(hex){hex=hex.replace(/^0x/i,"");const res=[];for(let i=0;i<hex.length;i+=64){const chunk=hex.slice(i,i+64);res.push(chunk)}return res},exports.minIndex=function(arr){const res=(0,lodash_1.minBy)(Object.entries(arr),(itm=>itm[1]));return res?{minVal:res[1],minIndex:res[0]}:null},exports.minIndexBy=function(arr,byFunc){const res=(0,lodash_1.minBy)(Object.entries(arr),(itm=>byFunc(itm)));return res?{minVal:res[1],minIndex:res[0]}:null}},1222:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.JobQueue=void 0;const deferred_1=__webpack_require__(171);exports.JobQueue=class JobQueue{constructor(){this._queue=[],this.isProcessing=!1}addJob(exeFunc){const def=new deferred_1.Deferred;return this._queue.push({def,exeFunc}),this._checkJob(),def.promise}_checkJob(){if(this.isProcessing)return;if(this._queue.length<=0)return;const itm=this._queue.shift();this._exeJob(itm)}async _exeJob({def,exeFunc}){try{this.isProcessing=!0;const res=await exeFunc();def.resolve(res)}catch(error){def.reject(error)}finally{this.isProcessing=!1,this._checkJob()}}}},8751:(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.transformArrayElementToNumber=exports.toDecimal128=exports.toNumber=void 0;const realm_1=__webpack_require__(752).__importDefault(__webpack_require__(460));function toNumber(val){return parseFloat(val)}exports.toNumber=toNumber,exports.toDecimal128=function(val){return realm_1.default.BSON.Decimal128.fromString(val)},exports.transformArrayElementToNumber=function(val){return val.map((itm=>toNumber(itm)))}},1366:module=>{module.exports=require("@dynamic-amm/sdk")},399:module=>{module.exports=require("@ethersproject/providers")},6807:module=>{module.exports=require("@walletconnect/client")},8303:module=>{module.exports=require("@walletconnect/qrcode-modal")},2167:module=>{module.exports=require("axios")},6974:module=>{module.exports=require("debug")},6517:module=>{module.exports=require("lodash")},2245:module=>{module.exports=require("moment")},8013:module=>{module.exports=require("mongodb")},3159:module=>{module.exports=require("node-telegram-bot-api")},9369:module=>{module.exports=require("process")},460:module=>{module.exports=require("realm")},752:module=>{module.exports=require("tslib")},8519:module=>{module.exports=require("web3")},6113:module=>{module.exports=require("crypto")},7147:module=>{module.exports=require("fs")},2037:module=>{module.exports=require("os")},1017:module=>{module.exports=require("path")},2781:module=>{module.exports=require("stream")},7310:module=>{module.exports=require("url")}},__webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(void 0!==cachedModule)return cachedModule.exports;var module=__webpack_module_cache__[moduleId]={exports:{}};return __webpack_modules__[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.exports}var __webpack_exports__={};(()=>{var exports=__webpack_exports__;Object.defineProperty(exports,"__esModule",{value:!0}),exports.withErrorWrapper=void 0;const tslib_1=__webpack_require__(752),MongoDataStore=tslib_1.__importStar(__webpack_require__(1529)),pori_actions_1=__webpack_require__(2664),pori_metadata_1=__webpack_require__(2819),Repos=tslib_1.__importStar(__webpack_require__(2098)),utils_1=__webpack_require__(9095),fs_1=__webpack_require__(7147),moment_1=tslib_1.__importDefault(__webpack_require__(2245)),node_telegram_bot_api_1=tslib_1.__importDefault(__webpack_require__(3159)),os=tslib_1.__importStar(__webpack_require__(2037)),process_1=tslib_1.__importDefault(__webpack_require__(9369)),config_1=__webpack_require__(3554),worker_1=__webpack_require__(2212);let Memory,appCtx;function captureChatId(chatId){Memory.activeChats.includes(chatId)||(Memory.activeChats.push(chatId),config_1.activeEnv.environment.botMemoryPath&&((0,fs_1.writeFileSync)(config_1.activeEnv.environment.botMemoryPath,JSON.stringify(Memory)),console.log(`🤖 - memory restore from ${config_1.activeEnv.environment.botMemoryPath}`)))}async function doFetchSnapshotDb(bot,chatId,ctx,realm){var _a;const backupKey=(0,pori_metadata_1.getDatastoreBackupKey)(config_1.env),checkMsg=await bot.sendMessage(chatId,`🗄 ${backupKey} - checking...`);await MongoDataStore.waitForConnected(ctx);const metadata=await MongoDataStore.fetchBolb(ctx,backupKey),localMetadata=await getLocalRealmRevision(realm),remoteRevision=null===(_a=null==metadata?void 0:metadata.metadata)||void 0===_a?void 0:_a.revision,shouldPull=remoteRevision>localMetadata.revision;await bot.editMessageText(`🗄 ${backupKey} - remoteRevision:${remoteRevision}, localRevision:${localMetadata.revision}\n        - shouldPull: ${shouldPull}\n        `,{chat_id:checkMsg.chat.id,message_id:checkMsg.message_id,reply_markup:{inline_keyboard:shouldPull?[[{text:"db_pull",switch_inline_query_current_chat:"/db_pull"}]]:void 0}})}async function getLocalRealmRevision(realm){return{revision:(await Repos.IdleGameSCMetadataRepo.findOne(realm,"default")).updatedBlock}}function requireBotMaster(msg){return msg.from.id.toString()===config_1.botMasterUid}async function withErrorWrapper({chatId,bot},handler){try{await handler()}catch(error){console.error(error),await bot.sendMessage(chatId,`Error: ${error.message}`)}}exports.withErrorWrapper=withErrorWrapper,process_1.default.on("uncaughtException",(err=>{console.log("got uncaughtException exit"),appCtx.ui.writeMessage(`🤖 uncaughtException: ${err.message}`),console.error(err),process_1.default.exit(1)})),process_1.default.on("unhandledRejection",(err=>{console.log("got unhandledRejection exit"),appCtx.ui.writeMessage(`🤖 unhandledRejection: ${err.message}`),console.error(err),process_1.default.exit(1)})),async function(){const token=process_1.default.env.TELEGRAM_TOKEN;if(!token)return console.error("missing env TELEGRAM_TOKEN"),process_1.default.exit(1);if(!config_1.botMasterUid)return console.error("missing env TELEGRAM_MASTER_ID"),process_1.default.exit(1);console.log("🤖 booting step 1 done");const bootInfo=await async function(){console.log(config_1.env,config_1.activeEnv),config_1.playerAddress||(console.log("missing process.env.PLAYER_ADDRESS"),process_1.default.exit(1));console.log("PlayerAddress:",config_1.playerAddress),console.log("Example: cli");const ctx=await(0,pori_actions_1.init)(config_1.env);console.log("connected"),ctx.playerAddress=config_1.playerAddress;const realm=await Repos.openRepo({path:config_1.activeEnv.environment.dbPath}),scheduler=new Repos.Services.SchedulerService;return await scheduler.start(realm),{realm,ctx,scheduler}}(),{ctx,scheduler}=bootInfo;let realm=bootInfo.realm;!function(){if(config_1.activeEnv.environment.botMemoryPath&&(0,fs_1.existsSync)(config_1.activeEnv.environment.botMemoryPath)){const data=(0,fs_1.readFileSync)(config_1.activeEnv.environment.botMemoryPath).toString();return Memory=JSON.parse(data),void console.log("🤖 - memory restore from activeEnv.environment.botMemoryPath")}Memory={activeChats:[]}}(),console.log("🤖 booting step 2 done");const bot=new node_telegram_bot_api_1.default(token,{polling:!0});bot.on("polling_error",console.log),config_1.activeEnv.environment.mongodbDataStoreUri&&MongoDataStore.addMongodbDataStore(ctx,config_1.activeEnv.environment.mongodbDataStoreUri,config_1.activeEnv.environment.mongodbDataStoreSSLCer).then((res=>{ctx.ui.writeMessage("🤖 mongodb datastore connected!");const chatId=Memory.activeChats[0];chatId&&doFetchSnapshotDb(bot,parseInt(chatId),ctx,realm)})),(0,worker_1.registerWorkerNotify)({ctx,realm,scheduler,bot}),ctx.ui.writeMessage=async msg=>{const chatId=Memory.activeChats[0];if(chatId)return await bot.sendMessage(chatId,msg)},ctx.ui.editMessage=async(lastMsg,msg)=>{const msgInfo=lastMsg;msgInfo&&await bot.editMessageText(msg,{chat_id:msgInfo.chat.id,message_id:msgInfo.message_id})},appCtx=ctx,bot.onText(/\/whoami/,(async function(msg){if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const localMetadata=await getLocalRealmRevision(realm),resp=`i am 🤖. \n    <pre><code class="language-json">\n      isMaster: ${msg.from.id.toString()===config_1.botMasterUid}\n      masterUid: ${config_1.botMasterUid}\n      uptime: ${process_1.default.uptime()}\n      pid: ${process_1.default.pid}\n      hostname: ${os.hostname()}\n      playerAddress: ${config_1.playerAddress}\n      walletUnlock: ${Boolean(ctx.walletAcc)}\n      settingGasFactor: ${ctx.setting.gasFactor} \n      realmRevision: ${localMetadata.revision}\n      env: ${config_1.env}\n      _v: ${config_1.VERSION}\n    </code></pre>\n    Have fun!\n    `;bot.sendMessage(msg.chat.id,resp,{parse_mode:"HTML"})})),bot.onText(/\/clear/,(async function(msg){requireBotMaster(msg)&&(captureChatId(msg.chat.id),await bot.sendMessage(msg.chat.id,"clear...",{reply_markup:{remove_keyboard:!0}}))})),bot.onText(/\/exit/,(async function(msg){requireBotMaster(msg)&&(captureChatId(msg.chat.id),await bot.sendMessage(msg.chat.id,"shutdown... in next 2 sec",{reply_markup:{remove_keyboard:!0}}),setTimeout((()=>{process_1.default.exit(0)}),2e3))})),bot.onText(/\/help/,(async function(msg){requireBotMaster(msg)&&(captureChatId(msg.chat.id),await bot.sendMessage(msg.chat.id,"clear...",{reply_markup:{keyboard:[[{text:"/db_fetch"},{text:"/db_upload"},{text:"/sch_list"},{text:"/auto_list"}],[{text:"/auto_all"},{text:"/setting_set_gas_factor 1.05"}],[{text:"/market_list"},{text:"/price"},{text:"/wallet_balance"},{text:"/whoami"}],[{text:"/stats"}]],resize_keyboard:!0}}))})),bot.onText(/\/setting_set_gas_factor (.+)/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const args=parseFloat(match[1]);ctx.setting.gasFactor=args,ctx.ui.writeMessage(`update setting.gasFactor to ${args}`)}))})),bot.onText(/\/wallet_reset/,(async function(msg){requireBotMaster(msg)&&(captureChatId(msg.chat.id),ctx.walletAcc=null)})),bot.onText(/\/wallet_balance/,(async function(msg){if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const rigyInfo=(0,pori_metadata_1.getRIGYTokenInfo)(config_1.env),rikenInfo=(0,pori_metadata_1.getRIKENTokenInfo)(config_1.env);let[RIGY,RIKEN,MATIC,priceInfo]=await Promise.all([(0,pori_actions_1.getTokenBalance)({ctx,erc20Address:rigyInfo.tokenAddress,walletAddress:config_1.playerAddress}),(0,pori_actions_1.getTokenBalance)({ctx,erc20Address:rikenInfo.tokenAddress,walletAddress:config_1.playerAddress}),(0,pori_actions_1.getMaticBalance)({ctx,walletAddress:config_1.playerAddress}),(0,pori_actions_1.token2Usd)(ctx)]);ctx.env===pori_metadata_1.ENV.ProdPorichain&&(RIGY=MATIC,MATIC=0),bot.sendMessage(msg.chat.id,`#balance\n      <pre><code class="language-json">${JSON.stringify({MATIC,RIGY,RIKEN,RigyUsd:RIGY*priceInfo.rigy2Usd,RikenUsd:RIKEN*priceInfo.rken2Usd},null,2)}</code></pre>`,{parse_mode:"HTML"})})),bot.onText(/\/wallet_unlock (.+)/,(async function(msg,match){if(!requireBotMaster(msg))return;if(captureChatId(msg.chat.id),!(0,fs_1.existsSync)(config_1.activeEnv.environment.aesKeyPath))return void await bot.sendMessage(msg.chat.id,"key not found. Please generate a new key + rebuild docker img...");const keyObj=JSON.parse((0,fs_1.readFileSync)(config_1.activeEnv.environment.aesKeyPath).toString()),key=Buffer.from(keyObj.key,"hex"),iv=Buffer.from(keyObj.iv,"hex");let privKey="";try{const encrypted=match[1];privKey=await(0,utils_1.decryptAes)({key,iv,encrypted})}catch(error){return void await bot.sendMessage(msg.chat.id,"decrypt error...")}try{const acc=ctx.web3.eth.accounts.privateKeyToAccount(privKey);if(acc.address!==config_1.playerAddress)throw new Error("not match playerAddress...");ctx.walletAcc=acc}catch(error){return void await bot.sendMessage(msg.chat.id,error.message)}await bot.sendMessage(msg.chat.id,"wallet unlocked.."),await bot.deleteMessage(msg.chat.id,msg.message_id.toString())})),bot.onText(/\/stats/,(async(msg,match)=>{await withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{var _a,_b,_c,_d,_e,_f,_g,_h,_j;if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const addr=config_1.playerAddress;await bot.sendMessage(msg.chat.id,"refreshing....");const humanView=await pori_actions_1.Computed.MyAdventure.refreshAdventureStatsForAddress({realm,ctx,options:{withGasPrice:!0,withPortal:!0,withPrice:!0}},addr),chartIncomLast7Days=await pori_actions_1.Computed.MyAdventure.genLast7DaysGraphData({ctx,realm,playerAddress:addr}),localMetadata=await getLocalRealmRevision(realm),protentialTarget=humanView.protentialTarget,mines=Object.values(humanView.mines),resp=`\n<b>Mines:</b>      \n${mines.map((itm=>(inp=>{var _a,_b;return`  * <a href="${(0,pori_metadata_1.getMobileWalletApplink)(config_1.env,inp.link)}">${inp.mineId}</a>\n          - supporterAddr: ${inp.supporterAddress}\n          - blockTo: ${inp.blockedTo.toLocaleString()}\n          - supportTime: ${inp.atkAt.toLocaleString()}\n          - hasBigReward: ${inp.hasBigReward}\n          - isFarmer: ${inp.isFarmer}\n          - farmerRewardLevel: ${null===(_a=inp.farmerRewardLevel)||void 0===_a?void 0:_a.join(",")}\n          - supporterRewardLevel: ${null===(_b=inp.supporterRewardLevel)||void 0===_b?void 0:_b.join(",")}\n        `})(itm))).join("\n")}\n<b>Targets:</b>\n${protentialTarget.slice(0,5).filter((itm=>!!itm)).map((itm=>`\t\t - ${itm.mineId} bigReward-${itm.hasBigReward} since-${itm.sinceSec} sec`)).join("\n")}\n<b>Summary:</b>\n  - <i>revision: </i> <b>${localMetadata.revision}</b>\n  - <i>canDoNextAction: </i> <b>${humanView.canDoNextAction}</b>\n  - <i>activeMine: </i> ${humanView.activeMines}\n  - <i>nextSupportAt: </i> ${humanView.nextAtkAt}\n  - <i>nextActionAt: </i> ${humanView.nextActionAt}\n  - <i>gasPriceGWEI: </i> ${humanView.gasPriceGWEI}\n  - <i>portalInfo: </i> available/supplied: ${null===(_a=humanView.portalInfo)||void 0===_a?void 0:_a.availableRiken}/${null===(_b=humanView.portalInfo)||void 0===_b?void 0:_b.suppliedRiken}, nextMissionRequire: ${null===(_c=humanView.portalInfo)||void 0===_c?void 0:_c.nextMissionRequireRiken}\n\n<b>Today:</b>\n  - <i>day: </i> ${new Date(null===(_d=humanView.todayStats)||void 0===_d?void 0:_d.timestamp).toLocaleDateString()}\n  - <i>mines: </i> ${null===(_e=humanView.todayStats)||void 0===_e?void 0:_e.finishedMineIds.length}\n  - <i>RIGY: </i> ${null===(_f=humanView.todayStats)||void 0===_f?void 0:_f.totalRigy}\n  - <i>RIKEN: </i> ${null===(_g=humanView.todayStats)||void 0===_g?void 0:_g.totalRiken}\n  - <i>RIGY$: </i> ${null===(_h=humanView.todayStats)||void 0===_h?void 0:_h.rigyUsd}\n  - <i>RIKEN$: </i> ${null===(_j=humanView.todayStats)||void 0===_j?void 0:_j.rikenUsd}\n\n\n<b>Charts:</b>\n  - <a href="${chartIncomLast7Days.url}">RIGYLast7Days</a>\n\n      `;let keyboardActions=[];const hasPortal=function(humanView){return humanView.activeMines<=0}(humanView);keyboardActions=protentialTarget.slice(0,5).map((itm=>({text:`${itm.mineId} - ${itm.hasBigReward?1:0}`,switch_inline_query_current_chat:hasPortal?`/atk ${itm.mineId} 1`:`/atk ${itm.mineId} 0`})));const newMineAction={text:"new mine",switch_inline_query_current_chat:hasPortal?"/mine 1":"/mine 0"},keyboard=humanView.canDoNextAction?[keyboardActions,[newMineAction]]:void 0;!function(mines,msg){const now=Date.now();for(const itm of mines)itm.canCollect||(0,worker_1.addWorkerTaskForMineEndNotify)({ctx,realm,scheduler,chatId:msg.chat.id,mineId:itm.mineId,endAt:itm.blockedTo,pnMessage:`mine ${itm.mineId} end`,extra:{reply_markup:{inline_keyboard:[[{text:"finish",switch_inline_query_current_chat:`/finish ${itm.mineId}`}]]}}}),itm.atkAt.valueOf()>now&&(0,worker_1.addWorkerTaskForMineAtkNotify)({ctx,realm,scheduler,chatId:msg.chat.id,mineId:itm.mineId,endAt:itm.atkAt,pnMessage:`mine ${itm.mineId} can atk`,extra:{reply_markup:{inline_keyboard:[[{text:"support",switch_inline_query_current_chat:`/support ${itm.mineId}`}]]}}})}(mines,msg),await bot.sendMessage(msg.chat.id,"finish...."),await bot.sendMessage(msg.chat.id,resp,{parse_mode:"HTML",reply_markup:{inline_keyboard:keyboard}})}))})),bot.onText(/\/finish (.+)/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const args=match[1];await pori_actions_1.Cmds.cmdDoFinish({ctx,realm,args})}))})),bot.onText(/\/auto_all/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(requireBotMaster(msg)){if(captureChatId(msg.chat.id),!ctx.walletAcc)return bot.sendMessage(msg.chat.id,"please call /wallet_unlock <.enveloped_key..> frist");for await(const iterator of config_1.RuntimeConfig.formations)await pori_actions_1.Auto.autoPlayV1({ctx,realm,playerAddress:config_1.playerAddress,args:{type:"bot",minePories:iterator.minePories,supportPori:iterator.supportPori,timeOutHours:config_1.RuntimeConfig.settings.botTimeoutHours,usePortal:iterator.usePortal}}),await(0,utils_1.waitForMs)(2e4);await pori_actions_1.Auto.autoRefreshStatus({ctx,realm,playerAddress:config_1.playerAddress,args:{type:"background_refresh",intervalMs:12e4}})}}))})),bot.onText(/\/auto_list/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const allRunningBots=Object.entries(pori_actions_1.Auto.AutoPlayDb).map((itm=>itm[1])),resp=allRunningBots.map((itm=>{const args=itm.args;switch(args.type){case"bot":{const endAt=new Date(itm.state.startAt.valueOf()+60*args.timeOutHours*60*1e3);return`  * bot : ${itm.state.id}\n                startAt: ${itm.state.startAt.toLocaleString()}\n                endAt: ${endAt.toLocaleString()}\n                `}case"background_refresh":return`  * background_refresh : ${itm.state.id} \n                interval: - ${args.intervalMs} ms\n                it: - ${itm.state.data._it} times\n                nextAt: - ${(0,moment_1.default)(itm.state.data._nextAt).fromNow()} \n                `}})).join("\n");let keyboardActions=[];keyboardActions=allRunningBots.map((itm=>({text:`del - ${itm.state.id}`,switch_inline_query_current_chat:`/auto_del ${itm.state.id}`}))),await bot.sendMessage(msg.chat.id,resp||"empty",{parse_mode:"HTML",reply_markup:{inline_keyboard:[keyboardActions]}})}))})),bot.onText(/\/auto_del (.+)/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const botId=match[1];await pori_actions_1.Auto.stopBot(botId),bot.sendMessage(msg.chat.id,`jobId ${botId} deleted`)}))})),bot.onText(/\/sch_list/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const allPendingJobs=await scheduler.listPendingJob(realm),resp=allPendingJobs.map((itm=>`  * ${itm._id} - ${itm.codeName} - ${itm.runAt.toLocaleString()} (${(0,moment_1.default)(itm.runAt).fromNow()})`)).join("\n");let keyboardActions=[];keyboardActions=allPendingJobs.map((itm=>({text:`del - ${itm._id}`,switch_inline_query_current_chat:`/sch_del ${itm._id}`}))),await bot.sendMessage(msg.chat.id,resp||"empty",{parse_mode:"HTML",reply_markup:{inline_keyboard:[keyboardActions]}})}))})),bot.onText(/\/sch_del (.+)/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const jobId=match[1];await scheduler.deleteJob(realm,jobId),bot.sendMessage(msg.chat.id,`jobId ${jobId} deleted`)}))})),bot.onText(/\/price/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const rigyPoolInfo=await(0,pori_actions_1.getKyberPoolRIGYPrice)({ctx}),rikenPoolInfo=await(0,pori_actions_1.getKyberPoolRIKENPrice)({ctx}),[lunaBusd,maticBusd]=await Promise.all([(0,pori_actions_1.queryBinancePrice)({ctx,pair:"LUNABUSD"}),(0,pori_actions_1.queryBinancePrice)({ctx,pair:"MATICBUSD"})]);bot.sendMessage(msg.chat.id,`#price\n        <pre><code class="language-json">${JSON.stringify({...rigyPoolInfo,...rikenPoolInfo,"LUNA->BUSD":lunaBusd.price,"MATIC->BUSD":maticBusd.price},null,2)}</code></pre>`,{parse_mode:"HTML"})}))})),bot.onText(/\/market_list/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const sellingItems=await(0,pori_actions_1.queryMarketInfo)({ctx}),topItem=await(0,pori_actions_1.expandEngadedMission)({ctx,data:sellingItems.slice(0,5)}),marketplaceBaseUrl=(0,pori_metadata_1.getMarketplayBaseLink)(ctx.env),resp=`\n<b>Top 5:</b>\n${topItem.map((itm=>{const{tokenId,price,helpPower,minePower,numOfBreeds,maxOfBreeds,engagedMission}=itm;return{tokenId,link:`${marketplaceBaseUrl}/pori/${tokenId}`,price:(BigInt(price)/pori_metadata_1.TEN_POWER_10_BN).toString()+" RIGY",minePower,helpPower,engagedMission,breed:`${numOfBreeds} / ${maxOfBreeds}`}})).map((itm=>{const{link,price,minePower,helpPower,breed,tokenId,engagedMission}=itm;return`  link: <a href="${(0,pori_metadata_1.getMobileWalletApplink)(config_1.env,link)}">${tokenId}</a>\n      - price: ${price}\n      - minePower: ${minePower}\n      - helpPower: ${helpPower}\n      - breed: ${breed}\n      - engagedMission: ${engagedMission}\n    `})).join("\n")}\n`;await bot.sendMessage(msg.chat.id,resp,{parse_mode:"HTML"})}))})),bot.onText(/\/db_fetch/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{requireBotMaster(msg)&&(captureChatId(msg.chat.id),await doFetchSnapshotDb(bot,msg.chat.id,ctx,realm))}))})),bot.onText(/\/db_upload/,(async(msg,match)=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const backupKey=(0,pori_metadata_1.getDatastoreBackupKey)(config_1.env),checkMsg=await bot.sendMessage(msg.chat.id,`🗄 ${backupKey} uploading...`),remoteRevision=await async function(realm,ctx){const stream=(0,fs_1.createReadStream)(config_1.activeEnv.environment.dbPath),backupKey=(0,pori_metadata_1.getDatastoreBackupKey)(config_1.env);console.log(`upload snapshot - ${backupKey}`);const metadata={revision:(await Repos.IdleGameSCMetadataRepo.findOne(realm,"default")).updatedBlock};return await MongoDataStore.waitForConnected(ctx),await MongoDataStore.storeBlob(ctx,backupKey,stream,metadata),console.log(`uploaded - revision:${metadata.revision}`),metadata.revision}(realm,ctx),localMetadata=await getLocalRealmRevision(realm);await bot.editMessageText(`🗄 uploaded ${backupKey}. remoteRevision:${remoteRevision}, localRevision:${localMetadata.revision}`,{chat_id:checkMsg.chat.id,message_id:checkMsg.message_id})}))})),bot.onText(/\/db_pull/,(async msg=>{withErrorWrapper({chatId:msg.chat.id,bot},(async()=>{if(!requireBotMaster(msg))return;captureChatId(msg.chat.id);const backupKey=(0,pori_metadata_1.getDatastoreBackupKey)(config_1.env),checkMsg=await bot.sendMessage(msg.chat.id,`🗄 ${backupKey} - checking...`),updateText=async msg=>{await bot.editMessageText(`🗄 ${msg}`,{chat_id:checkMsg.chat.id,message_id:checkMsg.message_id})};await MongoDataStore.waitForConnected(ctx);(0,fs_1.existsSync)("./tmp/")||(0,fs_1.mkdirSync)("./tmp/");const[fileMeta,dataStream]=await MongoDataStore.downloadBlob(ctx,backupKey),totalBytes=fileMeta.length;let downloaded=0;await updateText(`download begin. totalBytes ${totalBytes}`),dataStream.prependListener("data",(async chunk=>{downloaded+=chunk.length,await updateText("progress "+downloaded/totalBytes)})),dataStream.pipe((0,fs_1.createWriteStream)("./tmp/snapshot.realm")).on("finish",(async()=>{await updateText("download finish. begin extract"),realm.close(),(0,fs_1.copyFileSync)("./tmp/snapshot.realm",config_1.activeEnv.environment.dbPath),await updateText("extract success. reload realm begin"),await async function(){realm=await Repos.openRepo({path:config_1.activeEnv.environment.dbPath})}(),await updateText("reload realm success");const localMetadata=await getLocalRealmRevision(realm);await updateText(`#datastore_sync ${localMetadata.revision}`)}))}))})),console.log("🤖 started");for(const id of Memory.activeChats)await bot.sendMessage(id,`hi [master](tg://user?id=${config_1.botMasterUid}) 👋`,{parse_mode:"MarkdownV2"});process_1.default.once("SIGTERM",(async()=>{await async function(){console.log("cleanup start");for(const id of Memory.activeChats)await bot.sendMessage(id,"bye 👋!");console.log("bye 👋!")}(),appCtx.ui.writeMessage("recieved SIGTERM"),process_1.default.exit(0)}))}()})();var __webpack_export_target__=exports;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();
//# sourceMappingURL=main.js.map